TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE    1

      25 000080                 .text
      26                        .copy       "dartm11.asm"
 A     1                      .mmregs
 A     2                      .global ZERO, BMAR, PREG, DBMR, INDX, ARCR, TREG1
 A     3                      .global TREG2, CBSR1, CBER1, CBSR2, CBER2
 A     4 000080               .text
 A     5              ;
 A     6              ; TMS320C542 Debug Monitor - Translated (and modified) from 'C50 version
 A     7              ;
 A     8              ; Vandiver Electronics
 A     9              ; 741 Chase Road 
 A    10              ; Huntsville, Alabama 35811
 A    11              ;
 A    12              ; Revision History
 A    13              ; 
 A    14              ; Date          Monitor Version/Action
 A    15              ; 23 Dec 2009   1.10: Updated boot-up messages.
 A    16              ; 29 Oct 2006   1.09: Added MASTER/SLAVE indication.
 A    17              ; 17 Sep 2006   1.09: Appended code and table for AD6620 set-up.
 A    18              ; 09 Sep 2006   1.09: Added semicolon terminator to "R" command. This terminator
 A    19              ;                     ends the command and returns the monitor to the ">" 
 A    20              ;                     command prompt. In this way, a file with a list of "R...;"
 A    21              ;                     commands can be sent to the monitor to initialize the
 A    22              ;                     AD6620. Added semicolon terminator to "I", "M", and "O"
 A    23              ;                     commands; updated help messages to reflect changes.
 A    24              ; 08 Sep 2006   1.09: Repaired branch to monitor at application.
 A    25              ; 08 Sep 2006   1.09: No changes to monitor, however, a small application 
 A    26              ;                     appended to assist in FIFO check-out. 
 A    27              ; 06 Sep 2006   1.09: Updates to AD6620 rspmod "R" command. Added "inp1hex"
 A    28              ;                     entry point to inp4hex routine to allow conversion
 A    29              ;                     of a single nybble to the MS nybble of a byte, followed
 A    30              ;                     by entry and conversion of LS nybble. Cleared B before
 A    31              ;                     each call to inp2hex for byte entries. Write to AMR
 A    32              ;                     and LAR forced at each read; read started with "dummy"
 A    33              ;                     read of DR0 to load DR4, DR3, DR2, and DR1 in AD6620.
 A    34              ;                     Refer to page 31 of AD6620 data sheet.
 A    35              ;                     Added "repout" feature to allow repeat of output
 A    36              ;                     function with same data and address as previous output
 A    37              ;                     simply by typing "R" for terminator (no need to type
 A    38              ;                     data or address again).
 A    39              
 A    40              ; 05 Sep 2006   1.08: Removed Iowa application code. Added DIS2HEX routine.
 A    41              ; 04 Sep 2006   1.08: Added "O" command for output to port without
 A    42              ;                               immediate read-back. Removed "C" command.
 A    43              ; 01 Sep 2006   1.08:   Updated RSP I/O addresses wr_rx and rd_rx to
 A    44              ;                               avoid boot conflict at I/O address E000h/FFFFh.
 A    45              ; 15 Jul 2006   1.08: Coded rspmod routine, to allow interaction with AD6620
 A    46              ; 14 Jul 2006   1.08: Dartmouth University Version for CHARM Rx-DSP
 A    47              ; 11 Oct 2001   1.07: Mods to app: Restructured sync code, moved to top.
 A    48              ; 05 Oct 2001   1.07: Mods to app: Timer value.
 A    49              ; 02 Oct 2001   1.07: Mods to app: Clean-up near end of code.
 A    50              ; 01 Oct 2001   1.07: Mods to app; 4 X 16 "correlator totals"
 A    51              ;               removed; 8 X 16 bagels kept. Bias and minor frame
 A    52              ;               reset counter added to data out.
 A    53              ; 29 Sep 2001   1.07: Mods to app; 8 X 16-bit counters for bagel.
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE    2

 A    54              ;               4 X 16 counters for correlator totals.
 A    55              ; 27 Sep 2001   1.07: Mods to app; timer interrupt.
 A    56              ; 27 Sep 2001   1.07: Mods to app (re-arranged code for sending data
 A    57              ;               to FIFO ASAP after interrupt; step cycle branching
 A    58              ;               clean-up; sweep DAC code telemetry fixed. Monitor
 A    59              ;               not changed.
 A    60              ; 04 Apr 2001   1.07: Mods to app (major/minor interrupt vectors same,
 A    61              ;               other clean-up, code re-arranged)
 A    62              ; 14 Nov 2000   1.07: Mods for interrupt driven version.
 A    63              ; 11 Nov 2000   1.07: Mods to app section for re-arranged log DACs,
 A    64              ;               so all log DACs are written to together, and all
 A    65              ;               linear DACs are likewise written to together.
 A    66              ; 03 Oct 2000   1.07: Mods to allow timer interrupt to simulate a 
 A    67              ;               minor frame interrupt. 
 A    68              ; 02 Oct 2000   1.07: Monitor combined with test "appcode". Message
 A    69              ;               added to boot-up banner to indicate this. Interrupt
 A    70              ;               vectors for major_int, minor_int defined.
 A    71              ; 01 Oct 2000   1.07: Cleared A and B to zero before call to inp2hex
 A    72              ;               in counter test routine cdisp. This should fix a bug
 A    73              ;               which often caused the counter display to run on
 A    74              ;               rather than stopping at the specified number of words.
 A    75              ;               Also made clearing of A and B the same at the beginning
 A    76              ;               of inp4hex. New start-up code, app branch, PMST init.
 A    77              ; 18 Sep 2000   1.06: Fixed B accumulator loading in inp3hex. First
 A    78              ;               nybble is now loaded, rather than "ored", into B.
 A    79              ; 18 Sep 2000   1.05: Doubled counter test gate time "ngate" to have
 A    80              ;               610 rpt/nop loops, to give a 1 second gate at 40 MHz. 
 A    81              ; 17 Sep 2000   1.04: Added "stlm A,AR2" to store intermediate checksum result
 A    82              ;               during EEPROM programming. Was neglecting to store sum
 A    83              ;               of data bytes previously. EEPROM was getting programmed
 A    84              ;               OK, but checksum was being flagged as being in error
 A    85              ;               (which it was). Some other clean-up, system constants
 A    86              ;               added, and self-modifying code in I/O modify routine
 A    87              ;               simplified.
 A    88              ;
 A    89              ; 14 Sep 2000   1.03: Added 8000h offset to EEPROM write code; lengthened delay.
 A    90              ;               Added carriage-return entry in iomod, modify, display,
 A    91              ;               fill, and cdisp. Should make for better "feel", so it
 A    92              ;               does not seem like the program is "getting away". 
 A    93              ; 13 Sep 2000   1.02: Interrupt vectors, counter display        
 A    94              ; 12 Sep 2000   1.01: Special version with counter test code. Timer interrupt
 A    95              ;               used to control counter gate time.
 A    96              ; 10 Apr 2000   1.00: Replaced pshm/popm instructions in asx, inp4hex, main.
 A    97              ; 24 Mar 2000   Debug of messages, previous mem/I/O.
 A    98              ; 23 Mar 2000   Assembly, first ROMs burned, debug.     
 A    99              ; 22 Mar 2000   Clean-up of code.       
 A   100              ; 21 Mar 2000   Copied from 'C50 Version, MONC55. Used TAP5000
 A   101              ;               translator; hand-modified some parts. Translator
 A   102              ;               tended to use lots of delayed branches and calls,
 A   103              ;               which made for difficult to read code.    
 A   104              ; 24 June 1996  Code design/entry.
 A   105              ; 25 June 1996  Serial Tx (asx) and Rx (asr) routines working.
 A   106              ; 26 June 1996  Routines msgout, asc2hex, hex2asc, inphex, dis4hex, modify.
 A   107              ; 27 June 1996  Routines go, display, fill, and main menu.
 A   108              ; 28 June 1996  Routines load, io, eeprom.
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE    3

 A   109              ; 02 July 1996  Work on EEPROM routine, installed.
 A   110              ; 18 July 1996  Attempt to add help info and introductory message.
 A   111              ;               I/O and Modify commands with final CR, SPACE, -, or ESC
 A   112              ;               after new data entry.
 A   113              ; 24 Sep  1996  Checksum correction in Load and Eeprom routines- needed to
 A   114              ;               include length, address, and record type in checksum.  
 A   115              ; 25 Sep  1996  Line length counter fix in Load and Eeprom.
 A   116              ;
 A   117              ; System-specific constants
 A   118              ;
 A   119        00A0  npmst   .set    0000000010100000b
 A   120                                              ; Processor mode and status
 A   121                                              ; IPTR to page 1 (9 MSBs)
 A   122                                              ; MP/MC = 0, microcontroller
 A   123                                              ; OVLY = 1
 A   124                                              ; AVIS = 0
 A   125                                              ; DROM = 0
 A   126                                              ; CLKOFF = 0 (CLKOUT is active)
 A   127                                              ; SMUL = 0
 A   128                                              ; SST = 0
 A   129        8000  prom    .set    8000h           ; EEPROM base address
 A   130        0060  scratch .set    0060h           ; Scratchpad RAM 0060h - 007Fh
 A   131        27F0  stack   .set    27F0h           ; Stack pointer to high RAM
 A   132              ;
 A   133              ; System I/O
 A   134              ;
 A   135              ; Output Strobes
 A   136              ;
 A   137        0000  wr_rs_rx .set   0000h           ; Write to reset AD6620
 A   138        2000  wr_out0 .set    2000h           ; Write to spare LVDS OUT0
 A   139        4000  wr_out1 .set    4000h           ; Write to spare LVDS OUT1
 A   140        4000  wr_rx           .set    4000h           ; Updated RSP write address to avoid boot conflict
 A   141        6000  wr_rd_fifo      .set    6000h           ; Write strobe to force TLM FIFO read
 A   142        8000  wr_disc .set    8000h           ; Write to discrete output latch
 A   143        A000  wr_dog  .set    0A000h  ; Strobe watchdog timer chip
 A   144        C000  wr_out  .set    0C000h  ; Output write; can be jumpered to FIFO
 A   145        E000  wr_rsv  .set    0E000h  ; Write reserved/spare
 A   146              ;
 A   147              ; Input Strobes
 A   148              ;
 A   149        0000  rd_rx_out       .set    0000h           ; Read Rx FIFO word (output enable)
 A   150        2000  clk_rx_out      .set    2000h           ; Read strobe to clock next word from FIFO
 A   151        4000  rd_rx           .set    4000h           ; Read AD6620 RSP registers
 A   152        6000  rd_out2 .set    6000h           ; Strobe differential driver 30
 A   153        8000  rd_disc .set    8000h           ; Read discrete inputs
 A   154        A000  rs_rx_fifo      .set    0A000h  ; Rx FIFO reset strobe
 A   155        C000  rs_fifo .set    0C000h  ; TLM FIFO reset strobe
 A   156        E000  rd_rsv  .set    0E000h  ; Read address reserved for boot operation 
 A   157              
 A   158              ;
 A   159              ; AD6620 RSP register offsets
 A   160              ; Add to rd_rx/wr_rx to build final AD6620 External Interface Register Address
 A   161              ;
 A   162        0000  dr0     .set    0                       ; Data register 0, D[7:0]
 A   163        0001  dr1     .set    1                       ; Data register 1, D[15:8]
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE    4

 A   164        0002  dr2     .set    2                       ; Data register 2, D[23:16]
 A   165        0003  dr3     .set    3                       ; Data register 3, D[31:24]
 A   166        0004  dr4     .set    4                       ; Data register 4, D[35:32]
 A   167        0005  rsv     .set    5                       ; Reserved
 A   168        0006  lar     .set    6                       ; Low address register A[7:0]
 A   169        0007  amr     .set    7                       ; Address mode register
 A   170                                                      ; 7: Write increment
 A   171                                                      ; 6: Read increment
 A   172                                                      ; 5-2: Reserved
 A   173                                                      ; 1-0: A[9:8]
 A   174              
 A   175              ;
 A   176              ; Discrete input bits at 8000h
 A   177              ;
 A   178        0001  trm_28  .set    0001h           ; Terminal input (hardware EEPROM WR enable)
 A   179        0002  test_28 .set    0002h           ; Test input
 A   180              ;
 A   181              ; Character constants
 A   182              ;
 A   183        000D  CR      .set    0Dh 
 A   184        000A  LF      .set    0Ah 
 A   185        0D0A  CRLF    .set    0D0Ah           ; CR, LF as 1 word 
 A   186        001B  ESC     .set    1Bh 
 A   187              ;
 A   188              ; Async serial parameters
 A   189              ;
 A   190        0008  nbits   .set    8 
 A   191        0002  nstop   .set    2 
 A   192        411B  fullbit .set    16667           ; Number of CLKOUT1 cycles/bit at 2400 baud, 
 A   193        208D  halfbit .set    8333            ; with 40 MHz TCLK
 A   194              ;
 A   195              ;       Interrupt Vectors, RAM Page 1
 A   196              ;
 A   197 000080       START:
 A   198 000080 F073          b       mon             ; Reset/SINTR 0
         000081 0100'
 A   199 000082 F495          nop
 A   200 000083 F495          nop
 A   201              ;
 A   202 000084 F073          b       mon             ; NMI/SINT16 1
         000085 0100'
 A   203 000086 F495          nop
 A   204 000087 F495          nop
 A   205              ;
 A   206 000088 F073          b       mon             ; SINT17 2
         000089 0100'
 A   207 00008a F495          nop
 A   208 00008b F495          nop
 A   209              ;
 A   210 00008c F073          b       mon             ; SINT18 3
         00008d 0100'
 A   211 00008e F495          nop
 A   212 00008f F495          nop
 A   213              ;
 A   214 000090 F073          b       mon             ; SINT19 4
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE    5

         000091 0100'
 A   215 000092 F495          nop
 A   216 000093 F495          nop
 A   217              ;
 A   218 000094 F073          b       mon             ; SINT20 5
         000095 0100'
 A   219 000096 F495          nop
 A   220 000097 F495          nop
 A   221              ;
 A   222 000098 F073          b       mon             ; SINT21 6
         000099 0100'
 A   223 00009a F495          nop
 A   224 00009b F495          nop
 A   225              ;
 A   226 00009c F073          b       mon             ; SINT22 7
         00009d 0100'
 A   227 00009e F495          nop
 A   228 00009f F495          nop
 A   229              ;
 A   230 0000a0 F073          b       mon             ; SINT23 8
         0000a1 0100'
 A   231 0000a2 F495          nop
 A   232 0000a3 F495          nop
 A   233              ;
 A   234 0000a4 F073          b       mon             ; SINT24 9
         0000a5 0100'
 A   235 0000a6 F495          nop
 A   236 0000a7 F495          nop
 A   237              ;
 A   238 0000a8 F073          b       mon             ; SINT25 10
         0000a9 0100'
 A   239 0000aa F495          nop
 A   240 0000ab F495          nop
 A   241              ;
 A   242 0000ac F073          b       mon             ; SINT26 11
         0000ad 0100'
 A   243 0000ae F495          nop
 A   244 0000af F495          nop
 A   245              ;
 A   246 0000b0 F073          b       mon             ; SINT27 12
         0000b1 0100'
 A   247 0000b2 F495          nop
 A   248 0000b3 F495          nop
 A   249              ;
 A   250 0000b4 F073          b       mon             ; SINT28 13
         0000b5 0100'
 A   251 0000b6 F495          nop
 A   252 0000b7 F495          nop
 A   253              ;
 A   254 0000b8 F073          b       mon             ; SINT29 14
         0000b9 0100'
 A   255 0000ba F495          nop
 A   256 0000bb F495          nop
 A   257              ;
 A   258 0000bc F073          b       mon             ; SINT30 15
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE    6

         0000bd 0100'
 A   259 0000be F495          nop
 A   260 0000bf F495          nop
 A   261              ;
 A   262 0000c0 F073          b       major_int       ; INT0/SINT0 16
         0000c1 086C'
 A   263 0000c2 F495          nop
 A   264 0000c3 F495          nop
 A   265              ;
 A   266 0000c4 F073          b       minor_int       ; INT1/SINT1 17
         0000c5 086C'
 A   267 0000c6 F495          nop
 A   268 0000c7 F495          nop
 A   269              ;
 A   270 0000c8 F073          b       mon             ; INT2/SINT2 18
         0000c9 0100'
 A   271 0000ca F495          nop
 A   272 0000cb F495          nop
 A   273              ;
 A   274 0000cc F073          b       timer_int       ; TINT/SINT3 19 (just returns)
         0000cd 086C'
 A   275              ;       b       minor_int       ; Test code with timer
 A   276 0000ce F495          nop
 A   277 0000cf F495          nop
 A   278              ;
 A   279 0000d0 F073          b       mon             ; BRINT0/SINT4 20
         0000d1 0100'
 A   280 0000d2 F495          nop
 A   281 0000d3 F495          nop
 A   282              ;
 A   283 0000d4 F073          b       mon             ; BXINT0/SINT5 21
         0000d5 0100'
 A   284 0000d6 F495          nop
 A   285 0000d7 F495          nop
 A   286              ;
 A   287 0000d8 F073          b       mon             ; TRINT0/SINT6 22
         0000d9 0100'
 A   288 0000da F495          nop
 A   289 0000db F495          nop
 A   290              ;
 A   291 0000dc F073          b       mon             ; TXINT0/SINT7 23
         0000dd 0100'
 A   292 0000de F495          nop
 A   293 0000df F495          nop
 A   294              ;
 A   295 0000e0 F073          b       mon             ; INT3/SINT8 24
         0000e1 0100'
 A   296 0000e2 F495          nop
 A   297 0000e3 F495          nop
 A   298              ;
 A   299 0000e4 F073          b       mon             ; HPINT/SINT9 25
         0000e5 0100'
 A   300 0000e6 F495          nop
 A   301 0000e7 F495          nop
 A   302              ;               
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE    7

 A   303 0000e8 F073          b       mon             ; Reserved vector 26
         0000e9 0100'
 A   304 0000ea F495          nop
 A   305 0000eb F495          nop
 A   306              ;               
 A   307 0000ec F073          b       mon             ; Reserved vector 27
         0000ed 0100'
 A   308 0000ee F495          nop
 A   309 0000ef F495          nop
 A   310              ;               
 A   311 0000f0 F073          b       mon             ; Reserved vector 28
         0000f1 0100'
 A   312 0000f2 F495          nop
 A   313 0000f3 F495          nop
 A   314              ;               
 A   315 0000f4 F073          b       mon             ; Reserved vector 29
         0000f5 0100'
 A   316 0000f6 F495          nop
 A   317 0000f7 F495          nop
 A   318              ;               
 A   319 0000f8 F073          b       mon             ; Reserved vector 30
         0000f9 0100'
 A   320 0000fa F495          nop
 A   321 0000fb F495          nop
 A   322              ;               
 A   323 0000fc F073          b       mon             ; Reserved vector 31
         0000fd 0100'
 A   324 0000fe F495          nop
 A   325 0000ff F495          nop
 A   326              ;
 A   327              ; Start of Monitor Code - RAM page 1
 A   328              ;
 A   329 000100       mon:
 A   330 000100 F7BB          ssbx    INTM            ; Disable interrupts 
 A   331 000101 7718          stm     #stack,SP       ; Stack pointer to high RAM
         000102 27F0 
 A   332 000103 771D          stm     #npmst,PMST     ; Set processor mode/status
         000104 00A0 
 A   333 000105 F6B8          rsbx    SXM             ; Suppress sign extension 
 A   334 000106 F495          nop                     ; Space for branch to app
 A   335 000107 F495          nop
 A   336              
 A   337 000108 7413          portr   rd_disc, AR3    ; Get discrete bits to AR3
         000109 8000 
 A   338 00010a 6113          bitf    AR3,trm_28      ; Test for high terminal input  
         00010b 0001 
 A   339 00010c F820          bc      appcode,NTC     ; Run app if low, monitor if high 
         00010d 07E7'
 A   340              ;
 A   341              ; Application code entry point
 A   342              ; 
 A   343 00010e       appent:
 A   344              
 A   345 00010e E80D          ld      #000Dh,A        ; Output CR 
 A   346 00010f F074          call    asx
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE    8

         000110 016F'
 A   347 000111 E80A          ld      #000Ah,A        ; LF 
 A   348 000112 F074          call    asx
         000113 016F'
 A   349 000114 E80D          ld      #000Dh,A        ; Output CR 
 A   350 000115 F074          call    asx
         000116 016F'
 A   351 000117 E80A          ld      #000Ah,A        ; LF 
 A   352 000118 F074          call    asx
         000119 016F'
 A   353 00011a F020          ld      #version,A      ; Start-up message      
         00011b 0572'
 A   354 00011c F074          call    msgout
         00011d 019B'
 A   355 00011e E80D          ld      #000Dh,A        ; Output CR 
 A   356 00011f F074          call    asx
         000120 016F'
 A   357 000121 E80A          ld      #000Ah,A        ; LF 
 A   358 000122 F074          call    asx
         000123 016F'
 A   359              ;
 A   360              ; Main Loop- Command Interpreter
 A   361              ;
 A   362 000124       main:
 A   363 000124 E80D          ld      #000Dh,A        ; Output CR 
 A   364 000125 F074          call    asx
         000126 016F'
 A   365 000127 E80A          ld      #000Ah,A        ; LF 
 A   366 000128 F074          call    asx
         000129 016F'
 A   367 00012a E83E          ld      #003Eh,A        ; > prompt 
 A   368 00012b F074          call    asx
         00012c 016F'
 A   369 00012d F074          call    asr             ; Get command 
         00012e 0183'
 A   370 00012f F074          call    asx             ; Echo it 
         000130 016F'
 A   371              
 A   372 000131 8817          stlm    A,AR7           ; Save copy 
 A   373 000132 F010          sub     #0044h,A,A      ; D... display? 
         000133 0044 
 A   374 000134 F945          cc      display,AEQ
         000135 040C'
 A   375 000136 4817          ldm     AR7,A
 A   376               
 A   377 000137 8817          stlm    A,AR7
 A   378 000138 F010          sub     #0046h,A,A      ; F... fill? 
         000139 0046 
 A   379 00013a F945          cc      fill,AEQ
         00013b 0444'
 A   380 00013c 4817          ldm     AR7,A
 A   381               
 A   382 00013d 8817          stlm    A,AR7
 A   383 00013e F010          sub     #0047h,A,A      ; G... go? 
         00013f 0047 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE    9

 A   384 000140 F945          cc      go,AEQ
         000141 03FA'
 A   385 000142 4817          ldm     AR7,A
 A   386               
 A   387 000143 8817          stlm    A,AR7
 A   388 000144 F010          sub     #0049h,A,A      ; I... I/O? 
         000145 0049 
 A   389 000146 F945          cc      iomod,AEQ
         000147 02B1'
 A   390 000148 4817          ldm     AR7,A
 A   391               
 A   392 000149 8817          stlm    A,AR7
 A   393 00014a F010          sub     #004Ch,A,A      ; L... load? 
         00014b 004C 
 A   394 00014c F945          cc      load,AEQ
         00014d 01B3'
 A   395 00014e 4817          ldm     AR7,A
 A   396               
 A   397 00014f 8817          stlm    A,AR7
 A   398 000150 F010          sub     #004Dh,A,A      ; M... modify? 
         000151 004D 
 A   399 000152 F945          cc      modify,AEQ
         000153 038E'
 A   400 000154 4817          ldm     AR7,A
 A   401              
 A   402 000155 8817          stlm    A,AR7
 A   403 000156 F010          sub     #004Fh,A,A      ; O... output? 
         000157 004F 
 A   404 000158 F945          cc      output,AEQ
         000159 032C'
 A   405 00015a 4817          ldm     AR7,A
 A   406               
 A   407 00015b 8817          stlm    A,AR7
 A   408 00015c F010          sub     #0050h,A,A      ; P... program EEPROM? 
         00015d 0050 
 A   409 00015e F945          cc      eeprom,AEQ
         00015f 022C'
 A   410 000160 4817          ldm     AR7,A
 A   411              
 A   412 000161 8817          stlm    A,AR7
 A   413 000162 F010          sub     #0052h,A,A      ; R... AD6620 RSP register modify? 
         000163 0052 
 A   414 000164 F945          cc      rspmod,AEQ
         000165 04C8'
 A   415 000166 4817          ldm     AR7,A
 A   416               
 A   417 000167 8817          stlm    A,AR7
 A   418 000168 F010          sub     #003Fh,A,A      ; ?... Help? 
         000169 003F 
 A   419 00016a F945          cc      dhelp,AEQ
         00016b 01AE'
 A   420 00016c 4817          ldm     AR7,A
 A   421               
 A   422 00016d F073          b      main
         00016e 0124'
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   10

 A   423               
 A   424              ;
 A   425              ;  Software asynchronous serial transmit
 A   426              ;
 A   427              ;  Byte to send must be in low accumulator bits
 A   428              ;
 A   429 00016f       asx:
 A   430 00016f 8816          stlm    A,AR6           ; Preserve byte in Acc  
 A   431                                              ; AR5: bit counter 
 A   432 000170 F040          or      #0FF00h,A,A     ; Set high 8 bits of Acc to 1 
         000171 FF00 
 A   433 000172 F4BB          rsbx    C               ; Startbit = 0 
 A   434 000173 7715          stm     #10,AR5         ; Bit counter: 1 start + 8 databits + 2 stop 
         000174 000A 
 A   435 000175       txbit:
 A   436 000175 F808          bc      tx0,NC          ; Carry bit = data to send --> xf 
         000176 017A'
 A   437 000177 F7BD          ssbx    XF              ; "1" 
 A   438 000178 F073          b      tx
         000179 017B'
 A   439 00017a       tx0:
 A   440 00017a F6BD          rsbx    XF              ; "0" 
 A   441 00017b       tx:
 A   442 00017b F070          rpt     #fullbit        ; Wait for 1 bit period 
         00017c 411B 
 A   443 00017d F495          nop
 A   444 00017e F490          ror     A               ; Shift next bit into carry 
 A   445 00017f 6C8D          banz    txbit,*AR5-     ; Repeat for all bits 
         000180 0175'
 A   446 000181 4816          ldm     AR6,A           ; Restore byte in Acc 
 A   447 000182 FC00          ret
 A   448              ;
 A   449              ; Asynchronous serial receive
 A   450              ;
 A   451              ; Received data in Acc upon return
 A   452              ;
 A   453 000183       asr:
 A   454                                              ; AR5: bit counter 
 A   455 000183 7715          stm     #7,AR5          ; Set to number of data bits -1 
         000184 0007 
 A   456 000185 E800          ld      #0000h,A        ; Clear accumulator 
 A   457 000186 F4BB          rsbx    C               ; Clear carry bit
 A   458 000187       wedge:
 A   459 000187 F802          bc      wedge,NBIO      ; Wait for start bit edge (BIO* low)
         000188 0187'
 A   460               
 A   461 000189       edge:   
 A   462 000189 F070          rpt     #halfbit        ; Wait for middle of start bit 
         00018a 208D 
 A   463 00018b F495          nop
 A   464 00018c F802          bc      asr,NBIO        ; Is start bit still low at middle? 
         00018d 0183'
 A   465                                              ; No- go back and look for next start 
 A   466 00018e       sample:
 A   467 00018e F070          rpt     #fullbit        ; Full bit time wait 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   11

         00018f 411B 
 A   468 000190 F495          nop                     ; 
 A   469 000191 F803          bc      rzero,BIO
         000192 0195'
 A   470 000193 F040          or      #0100h,A        ; If sample = 1, put 1 into Acc bit 8
         000194 0100 
 A   471 000195       rzero:
 A   472 000195 F490          ror     A               ; Shift sample right, get ready for next
 A   473 000196 6C8D          banz    sample,*AR5-    ; All bits ?
         000197 018E'
 A   474 000198 F030          and     #00FFh,A 
         000199 00FF 
 A   475 00019a FC00          ret                     ; Received byte in Acc bits 7-0 
 A   476              ;
 A   477              ; Null-terminated string to console
 A   478              ;
 A   479              ; A should have address of message before call,
 A   480              ; which is moved to AR4 within the routine.
 A   481              ; Use like this:
 A   482              ;
 A   483              ;
 A   484              ;       ld     #message,A       ; Load starting address of string
 A   485              ;       call    msgout          ; Go display it
 A   486              ;       etc
 A   487              ;
 A   488 00019b       msgout:
 A   489 00019b 8814          stlm    A,AR4           ; Use AR4 as pointer 
 A   490 00019c       msg1:
 A   491 00019c 1284          ldu     *AR4,A          ; Get word pointed to by AR4 
 A   492 00019d F0F8          sftl    A,-8,A
 A   493 00019e F030          and     #00FFh,A,A       ;Use low byte 
         00019f 00FF 
 A   494 0001a0 F845          bc      msgx,AEQ        ; Display until null (0) byte reached 
         0001a1 01AD'
 A   495 0001a2 F074          call    asx
         0001a3 016F'
 A   496 0001a4 1294          ldu     *AR4+,A         ; Get word again, inc pointer 
 A   497 0001a5 F030          and     #00FFh,A,A      ; Use low byte 
         0001a6 00FF 
 A   498 0001a7 F845          bc      msgx,AEQ        ; Stop on null 
         0001a8 01AD'
 A   499 0001a9 F074          call    asx
         0001aa 016F'
 A   500 0001ab F073          b       msg1
         0001ac 019C'
 A   501 0001ad       msgx:
 A   502 0001ad FC00          ret
 A   503              ;
 A   504              ; Display help command list
 A   505              ;
 A   506 0001ae       dhelp:
 A   507 0001ae F020          ld      #help,A
         0001af 05B1'
 A   508 0001b0 F074          call    msgout
         0001b1 019B'
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   12

 A   509 0001b2 FC00          ret
 A   510              ;
 A   511              ;
 A   512              ; Load Intel Hex File to RAM
 A   513              ;
 A   514 0001b3       load:
 A   515 0001b3 F074          call    asr             ; Get character 
         0001b4 0183'
 A   516 0001b5 F074          call    asx             ; Echo 
         0001b6 016F'
 A   517 0001b7 F540          ld      A,0,B           ; Save a copy
 A   518 0001b8 F010          sub     #1Bh,A,A        ; ESC? (User has taken over link to exit) 
         0001b9 001B 
 A   519 0001ba F845          bc      loadret,AEQ     ; return immediately if ESC 
         0001bb 022B'
 A   520 0001bc F640          ld      B,0,A           ; Get copy of character
 A   521 0001bd F010          sub     #003Ah,A,A      ; Wait for : at start of line 
         0001be 003A 
 A   522 0001bf F844          bc      load,ANEQ
         0001c0 01B3'
 A   523 0001c1 E800          ld      #0000h,A        ; Clear accumulator 
 A   524 0001c2 F540          ld      A,0,B           ; Clear buffer 
 A   525 0001c3 8812          stlm    A,AR2           ; Clear checksum 
 A   526 0001c4 F074          call    inp2hex         ; Get number of bytes on this line 
         0001c5 047A'
 A   527 0001c6 F030          and     #00FFh,A,A      ; Mask to low byte to be safe 
         0001c7 00FF 
 A   528 0001c8 8812          stlm    A,AR2           ; Start checksum 
 A   529 0001c9 8811          stlm    A,AR1           ; Save and adjust length counter 
 A   530 0001ca F495          nop
 A   531 0001cb F495          nop
 A   532 0001cc 6D89          mar     *AR1-           ; Use number of bytes - 1 
 A   533               
 A   534 0001cd F495          nop
 A   535 0001ce F495          nop
 A   536 0001cf F074          call    inp4hex         ; Get destination address 
         0001d0 0467'
 A   537 0001d1 8810          stlm    A,AR0           ; Put in pointer 
 A   538 0001d2 F030          and     #00FFh,A,A      ; Mask to low byte 
         0001d3 00FF 
 A   539 0001d4 0012          add     AR2,A           ; AR2 holds checksum
 A   540 0001d5 8812          stlm    A,AR2           ; Save checksum
 A   541 0001d6 4810          ldm     AR0,A           ; Get address again 
 A   542 0001d7 F0F8          sftl    A,-8,A          ; Shift high byte to low byte
 A   543 0001d8 F030          and     #00FFh,A,A      ; Mask to low byte 
         0001d9 00FF 
 A   544 0001da 0012          add     AR2,A           ; add to checksum, AR2 at 18 
 A   545 0001db 8812          stlm    A,AR2           ; Save checksum 
 A   546 0001dc E800          ld      #0000h,A        ; Clear acc and buffer 
 A   547 0001dd F540          ld      A,0,B
 A   548 0001de F074          call    inp2hex         ; Get record type
         0001df 047A'
 A   549 0001e0 F030          and     #00FFh,A,A
         0001e1 00FF 
 A   550 0001e2 F540          ld      A,0,B           ; Save a copy 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   13

 A   551 0001e3 0012          add     AR2,A           ; add to checksum 
 A   552 0001e4 8812          stlm    A,AR2           ; Save checksum 
 A   553 0001e5 F640          ld      B,0,A           ; Get record type copy  
 A   554 0001e6 F845          bc      loadhi,AEQ      ; Get line if record type = 00 (data) 
         0001e7 01EE'
 A   555                                              ; Not data 
 A   556 0001e8 F010          sub     #01h,A,A        ; EOF? 
         0001e9 0001 
 A   557 0001ea F845          bc      loadex,AEQ      ; Exit if EOF 
         0001eb 021F'
 A   558 0001ec F073          B       load            ; Wait for data line otherwise 
         0001ed 01B3'
 A   559 0001ee       loadhi:
 A   560 0001ee E800          ld      #0000h,A        ; Clear acc and buffer 
 A   561 0001ef F540          ld      A,0,B
 A   562 0001f0 F074          call    inp2hex         ; Get data byte 
         0001f1 047A'
 A   563 0001f2 F030          and     #00FFh,A,A      ; Make sure higher data is zero 
         0001f3 00FF 
 A   564 0001f4 F540          ld      A,0,B
 A   565 0001f5 0012          add     AR2,A           ; AR2 holds checksum
 A   566 0001f6 8812          stlm    A,AR2
 A   567 0001f7 F640          ld      B,0,A           ; Get copy of byte
 A   568 0001f8 F0E8          sftl    A,+8,A          ; Shift to MS position of word
 A   569 0001f9 8080          stl     A,*AR0          ; Save high byte to memory, no increment 
 A   570                                              ; This also clears LS byte of memory
 A   571 0001fa 6C89          banz    loadlo,*AR1-    ; Last byte on line? 
         0001fb 01FE'
 A   572 0001fc F073          B       loadeol
         0001fd 020C'
 A   573               
 A   574 0001fe       loadlo:
 A   575 0001fe E800          ld      #0000h,A        ; Clear acc and buffer 
 A   576 0001ff F540          ld      A,0,B
 A   577 000200 F074          call    inp2hex         ; Get data byte 
         000201 047A'
 A   578 000202 F030          and     #00FFh,A,A      ; Low byte only 
         000203 00FF 
 A   579 000204 F540          ld      A,0,B           ; Save a copy
 A   580 000205 0012          add     AR2,A           ; AR2 holds checksum
 A   581 000206 8812          stlm    A,AR2
 A   582 000207 F640          ld      B,0,A           ; Get copy
 A   583 000208 1A80          OR      *AR0,A          ; OR with shifted byte to build word 
 A   584 000209 8090          stl     A,*AR0+         ; Save word to memory, inc address 
 A   585 00020a 6C89          banz    loadhi,*AR1-    ; Get next byte if not last 
         00020b 01EE'
 A   586 00020c       loadeol:
 A   587 00020c E800          ld      #0000h,A        ; Clear acc and buffer
 A   588 00020d F540          ld      A,0,B
 A   589 00020e F074          call   inp2hex          ; Get checksum 
         00020f 047A'
 A   590 000210 F030          and     #00FFh,A,A
         000211 00FF 
 A   591 000212 0012          add     AR2,A           ; AR2 holds checksum
 A   592              ;       stlm    A,AR2
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   14

 A   593 000213 F030          and     #00FFh,A,A      ; Look only at LS byte 
         000214 00FF 
 A   594 000215 F845          bc      load,AEQ        ; If zero, go get next line 
         000216 01B3'
 A   595 000217 E82A          ld      #002Ah,A        ; Flag error with * 
 A   596 000218 F074          call    asx
         000219 016F'
 A   597 00021a 4812          ldm     AR2,A           ; What do we think checksum is? 
 A   598 00021b F074          call    dis4hex
         00021c 048A'
 A   599 00021d F073          b       load            ; Do next line despite error 
         00021e 01B3'
 A   600               
 A   601 00021f       loadex:
 A   602 00021f E800          ld      #0000h,A        ; Clear acc and buffer
 A   603 000220 F540          ld      A,0,B  
 A   604 000221 F074          call   inp2hex          ; Get checksum 
         000222 047A'
 A   605 000223 F074          call    asr             ; Get final CR, LF and echo 
         000224 0183'
 A   606 000225 F074          call    asx
         000226 016F'
 A   607 000227 F074          call    asr
         000228 0183'
 A   608 000229 F074          call    asx
         00022a 016F'
 A   609 00022b       loadret:
 A   610 00022b FC00          ret
 A   611              ;
 A   612              ; Load Intel Hex File to byte-wide data space EEPROM
 A   613              ;
 A   614              ; Note: EEPROM is 8K or 32K X 8. address lines A00 to A12 are connected
 A   615              ; to the 'C542, allowing an 8K portion of EEPROM to be accessed. EEPROM
 A   616              ; address lines A13 and A14 are jumper-selectable. address lines A13,
 A   617              ; A14, and A15 from the 'C542 are decoded so that data memory address
 A   618              ; 8000H is the start of the EEPROM. At boot time, the 'C542 reads I/O
 A   619              ; address 0FFFFH, the contents of which is forced to XX81h by pull-ups
 A   620              ; and pull-downs. The low byte of this word (81H) is the boot routine
 A   621              ; select code, which causes the 'C542 to boot from the 8-bit EEPROM
 A   622              ; starting at data memory address 8000H. The boot loader on the 'C542
 A   623              ; reads the following bytes from the EEPROM:
 A   624              ; Destination (high), the program memory address where the program goes
 A   625              ; Destination (low)
 A   626              ; (Length in words -1) (high)
 A   627              ; (Length in words -1) (low)
 A   628              ; Program bytes
 A   629              ;
 A   630              ; Checksum failure on a given line, flagged by a "*" in the echo
 A   631              ; data, can indicate an erroneous value in the EEPROM found after
 A   632              ; readback, or some error in the incoming data.
 A   633              ;
 A   634              ; The write enable jumper must also be set properly for this to work.   
 A   635              ;
 A   636              ; Hex files should be generated for a base address of 0000h. This
 A   637              ; routine will "OR" 8000h with the addresses included with the HEX
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   15

 A   638              ; file so that address 0000h in the HEX file will correspond to
 A   639              ; 8000h in the DSP data memory space.
 A   640              ;
 A   641              ; Note that the EEPROM data appears as one (lower) byte at every
 A   642              ; word address from 8000H to 9FFFH. The upper byte of each word
 A   643              ; appears as FFh.
 A   644              ;
 A   645              ; Register usage:
 A   646              ; AR0: address
 A   647              ; AR1: bytes per line
 A   648              ; AR2: checksum
 A   649              ; Accumulators A and B: Miscellaneous
 A   650              ;
 A   651 00022c       eeprom:
 A   652 00022c F074          call    asr             ; Get character 
         00022d 0183'
 A   653 00022e F074          call    asx             ; Echo 
         00022f 016F'
 A   654 000230 F540          ld      A,0,B           ; Save a copy
 A   655 000231 F010          sub     #1Bh,A,A        ; ESC? (User has taken over link to exit) 
         000232 001B 
 A   656 000233 F845          bc      eepret,AEQ      ; return immediately if ESC 
         000234 02B0'
 A   657 000235 F640          ld      B,0,A           ; Get copy of character
 A   658 000236 F010          sub     #003Ah,A,A      ; Wait for : at start of line 
         000237 003A 
 A   659 000238 F844          bc      eeprom,ANEQ
         000239 022C'
 A   660 00023a E800          ld      #0000h,A        ; Clear accumulator and buffer
 A   661 00023b F540          ld      A,0,B
 A   662 00023c 8812          stlm    A,AR2           ; Clear checksum
 A   663 00023d F074          call    inp2hex         ; Get number of bytes on this line
         00023e 047A'
 A   664 00023f F030          and     #00FFh,A,A      ; Low byte only 
         000240 00FF 
 A   665 000241 8812          stlm    A,AR2           ; Start checksum 
 A   666 000242 8811          stlm    A,AR1           ; Save and adjust length counter
 A   667 000243 F495          nop
 A   668 000244 F495          nop
 A   669 000245 6D89          mar     *AR1-           ; Use number of bytes - 1
 A   670 000246 F495          nop
 A   671 000247 F495          nop
 A   672 000248 F074          call    inp4hex         ; Get destination address
         000249 0467'
 A   673 00024a 8810          stlm    A,AR0           ; Save to pointer
 A   674 00024b F030          and     #00FFh,A,A      ; Get low byte 
         00024c 00FF 
 A   675 00024d 0012          add     AR2,A           ; add to checksum 
 A   676 00024e 8812          stlm    A,AR2           ; Save checksum 
 A   677 00024f 4810          ldm     AR0,A           ; Get address again 
 A   678 000250 F0F8          sftl    A,-8,A          ; Shift high byte to low byte
 A   679 000251 F030          and     #00FFh,A,A      ; Mask to low byte
         000252 00FF 
 A   680 000253 0012          add     AR2,A           ; add to checksum
 A   681 000254 8812          stlm    A,AR2           ; Save checksum
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   16

 A   682              ;
 A   683 000255 4810          ldm     AR0,A           ; Get address
 A   684 000256 F040          or      #8000h,A        ; Insert offset (EEPROM decoder base address)
         000257 8000 
 A   685 000258 8810          stlm    A,AR0           ; Save modified address for EEPROM write
 A   686              ;
 A   687 000259 E800          ld      #0000h,A        ; Clear accumulator and buffer
 A   688 00025a F540          ld      A,0,B 
 A   689 00025b F074          call    inp2hex         ; Get record type 
         00025c 047A'
 A   690 00025d F030          and     #00FFh,A,A      ; Mask to low byte
         00025e 00FF 
 A   691 00025f F540          ld      A,0,B           ; Save a copy 
 A   692 000260 0012          add     AR2,A           ; add to checksum 
 A   693 000261 8812          stlm    A,AR2           ; Save checksum 
 A   694 000262 F640          ld      B,0,A           ; Restore record type 
 A   695 000263 F845          bc      eeprdat,AEQ     ; Get line if record type = 00 (data) 
         000264 026B'
 A   696                                              ; Not data 
 A   697 000265 F010          sub     #01h,A,A        ; EOF? 
         000266 0001 
 A   698 000267 F845          bc      eeprex,AEQ      ; Exit if EOF 
         000268 02A4'
 A   699 000269 F073          b       eeprom          ; Wait for data line otherwise 
         00026a 022C'
 A   700 00026b       eeprdat:
 A   701 00026b E800          ld      #0000h,A        ; Clear acc and buffer 
 A   702 00026c F540          ld      A,0,B
 A   703 00026d F074          call    inp2hex         ; Get data byte 
         00026e 047A'
 A   704 00026f F030          and     #00FFh,A,A      ; Make sure high byte is zero
         000270 00FF 
 A   705 000271 8080          stl     A,*AR0          ; Save byte to memory 
 A   706 000272 F070          rpt     #0FFFFh         ; 3.2768 ms per repeated NOP at 20 MHz
         000273 FFFF 
 A   707 000274 F495          nop 
 A   708 000275 F070          rpt     #0FFFFh         ; 3.2768 ms per repeated NOP at 20 MHz
         000276 FFFF 
 A   709 000277 F495          nop 
 A   710 000278 F070          rpt     #0FFFFh         ; 3.2768 ms per repeated NOP at 20 MHz
         000279 FFFF 
 A   711 00027a F495          nop 
 A   712 00027b F070          rpt     #0FFFFh         ; 3.2768 ms per repeated NOP at 20 MHz
         00027c FFFF 
 A   713 00027d F495          nop 
 A   714 00027e F070          rpt     #0FFFFh         ; 3.2768 ms per repeated NOP at 20 MHz
         00027f FFFF 
 A   715 000280 F495          nop 
 A   716 000281 F070          rpt     #0FFFFh         ; 3.2768 ms per repeated NOP at 20 MHz
         000282 FFFF 
 A   717 000283 F495          nop 
 A   718 000284 F070          rpt     #0FFFFh         ; 3.2768 ms per repeated NOP at 20 MHz
         000285 FFFF 
 A   719 000286 F495          nop 
 A   720 000287 F070          rpt     #0FFFFh         ; 3.2768 ms per repeated NOP at 20 MHz
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   17

         000288 FFFF 
 A   721 000289 F495          nop 
 A   722              
 A   723              ;       ldu     *AR0+,A         ; Read back stored byte for check, inc pointer  
 A   724 00028a 1090          ld      *AR0+,A
 A   725 00028b F030          and     #00FFh,A,A
         00028c 00FF 
 A   726 00028d 0012          add     AR2,A           ; Add to checksum- which checks EEPROM 
 A   727 00028e 8812          stlm    A,AR2           ; Store intermediate checksum result (1.04 fix)
 A   728 00028f 6C89          banz    eeprdat,*AR1-   ; Last byte on line? 
         000290 026B'
 A   729               
 A   730 000291       eepreol:
 A   731 000291 E800          ld      #0000h,A        ; Clear acc and buffer 
 A   732 000292 F540          ld      A,0,B
 A   733 000293 F074          call    inp2hex         ; Get hex file checksum 
         000294 047A'
 A   734 000295 F030          and     #00FFh,A,A      ; Mask to low byte
         000296 00FF 
 A   735 000297 0012          add     AR2,A           ; Add to working sum in AR2
 A   736 000298 F030          and     #00FFh,A,A      ; Look only at LS byte 
         000299 00FF 
 A   737              ;       stlm    A,AR2           ; Save checksum
 A   738 00029a F845          bc      eeprom,AEQ      ; If zero, go get next line 
         00029b 022C'
 A   739 00029c E82A          ld      #002Ah,A        ; Flag error with * 
 A   740 00029d F074          call    asx
         00029e 016F'
 A   741 00029f 4812          ldm     AR2,A           ; Get value of checksum, display        
 A   742 0002a0 F074          call    dis4hex
         0002a1 048A'
 A   743 0002a2 F073          b       eeprom          ; Do next line despite error 
         0002a3 022C'
 A   744               
 A   745 0002a4       eeprex:
 A   746 0002a4 E800          ld      #0000h,A        ; Clear acc and buffer  
 A   747 0002a5 F540          ld      A,0,B
 A   748 0002a6 F074          call    inp2hex         ; Get EOF-record checksum 
         0002a7 047A'
 A   749 0002a8 F074          call    asr             ; Get final CR, LF and echo 
         0002a9 0183'
 A   750 0002aa F074          call    asx
         0002ab 016F'
 A   751 0002ac F074          call    asr
         0002ad 0183'
 A   752 0002ae F074          call    asx
         0002af 016F'
 A   753 0002b0       eepret:
 A   754 0002b0 FC00          ret
 A   755              
 A   756              ;
 A   757              ; Read port and write port machine codes
 A   758              ; 
 A   759              ; portr3  .set    07413h        ; Machine code for PORTR address, AR3 
 A   760              ; portw3  .set    07513h        ; Machine code for PORTW AR3, address 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   18

 A   761              ;
 A   762              ; Modify I/O space at user-specified address
 A   763              ;
 A   764              ; Simplified "self-modifying code" in version 1.04 - JCV
 A   765              ; Let assembler generate opcodes for portr and portw, then
 A   766              ; routine modifies address word as needed
 A   767              ; Uses:
 A   768              ; AR0: I/O address
 A   769              ; AR1: Points to address word of portr instruction
 A   770              ; AR2: Points to address word of portw instruction
 A   771              ; AR3: Holds data to send to or read from I/O port
 A   772              ;
 A   773              ; Added semicolon terminator 9 Sept. 2006
 A   774              ;
 A   775 0002b1       iomod:
 A   776              ;       ld      #aportr3,A      ; Address of portr address, AR3 code 
 A   777              ;       stlm    A,AR1
 A   778              ;       ld      #portr3,A       ; portr address, AR3 code 
 A   779              ;       stl     A,*AR1+         ; Store code and point to address word 
 A   780 0002b1 7711          stm     #aportr3,AR1    ; Get port read instruction address
         0002b2 02C7'
 A   781 0002b3 6D91          mar     *AR1+           ; Point to read port address word
 A   782 0002b4 F495          nop
 A   783 0002b5 F495          nop
 A   784              
 A   785              ;       ld      #aportw3,A      ; Address of portw AR3, address code 
 A   786              ;       stlm    A,AR2
 A   787              ;       ld      #portw3,A       ; portw AR3, address code 
 A   788              ;       stl     A,*AR2+         ; Store code and point to address word 
 A   789 0002b6 7712          stm     #aportw3,AR2    ; Point to port write instruction address
         0002b7 02F6'
 A   790 0002b8 6D92          mar     *AR2+           ; Point to write port address word
 A   791 0002b9 F495          nop
 A   792 0002ba F495          nop
 A   793              
 A   794 0002bb E820          ld      #0020h,A        ; Space over on screen 
 A   795 0002bc F074          call    asx
         0002bd 016F'
 A   796 0002be F074          call    inp4hex         ; Get I/O address 
         0002bf 0467'
 A   797 0002c0 8810          stlm    A,AR0           ; Save to AR0 for use as pointer 
 A   798              
 A   799 0002c1       modio:
 A   800 0002c1 4810          ldm     AR0,A           ; Restore I/O address in accumulator 
 A   801 0002c2 8081          stl     A,*AR1          ; Save address to input instruction 
 A   802 0002c3 8082          stl     A,*AR2          ; Save address to output instruction 
 A   803 0002c4 E820          ld      #0020h,A        ; Space over on screen 
 A   804 0002c5 F074          call    asx
         0002c6 016F'
 A   805 0002c7       aportr3:
 A   806 0002c7 7413          portr   0000h,AR3       ; Address is modified as needed
         0002c8 0000 
 A   807              ;       nop                     ; portr address, AR3 self-modifying
 A   808              ;       nop 
 A   809 0002c9 4813          ldm     AR3,A           ; Get data at I/O address 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   19

 A   810 0002ca F074          call    dis4hex         ; Display 
         0002cb 048A'
 A   811 0002cc E820          ld      #0020h,A        ; Space over 
 A   812 0002cd F074          call    asx
         0002ce 016F'
 A   813 0002cf F074          call    asr             ; Get response 
         0002d0 0183'
 A   814 0002d1 F540          ld      A,0,B           ; Save copy 
 A   815 0002d2 F010          sub     #000Dh,A,A      ; Carriage return? 
         0002d3 000D 
 A   816 0002d4 F845          bc      nextio,AEQ
         0002d5 0321'
 A   817 0002d6 F640          ld      B,0,A
 A   818 0002d7 F010          sub     #002Bh,A,A      ; +? 
         0002d8 002B 
 A   819 0002d9 F845          bc      nextio,AEQ
         0002da 0321'
 A   820 0002db F640          ld      B,0,A
 A   821 0002dc F010          sub     #002Dh,A,A      ; -? 
         0002dd 002D 
 A   822 0002de F845          bc      previo,AEQ
         0002df 0326'
 A   823 0002e0 F640          ld      B,0,A
 A   824 0002e1 F010          sub     #0020h,A,A      ; Space? 
         0002e2 0020 
 A   825 0002e3 F845          bc      sameio,AEQ
         0002e4 0316'
 A   826 0002e5 F640          ld      B,0,A
 A   827 0002e6 F010          sub     #001Bh,A,A      ; Escape? 
         0002e7 001B 
 A   828 0002e8 F845          bc      quitio,AEQ
         0002e9 032B'
 A   829 0002ea F640          ld      B,0,A
 A   830 0002eb F010          sub     #003Bh,A,A      ; Semicolon? 
         0002ec 003B 
 A   831 0002ed F845          bc      quitio,AEQ
         0002ee 032B'
 A   832              
 A   833 0002ef F640          ld      B,0,A           ; Assume new data 
 A   834               
 A   835 0002f0 F074          call    inp3hex         ; Echo MS nybble and get 3 remaining nybbles 
         0002f1 046C'
 A   836 0002f2 8813          stlm    A,AR3           ; AR3 holds output data 
 A   837 0002f3 F074          call    asr             ; Get terminator 
         0002f4 0183'
 A   838 0002f5 F540          ld      A,0,B           ; Save copy
 A   839                                              ; Modify port AFTER terminator is typed
 A   840 0002f6       aportw3:
 A   841 0002f6 7513          portw   AR3,0000h       ; Address is modified as needed
         0002f7 0000 
 A   842              ;       nop                     ; portw AR3, address self modifying 
 A   843              ;       nop 
 A   844                      
 A   845 0002f8 F640          ld      B,0,A 
 A   846 0002f9 F010          sub     #000Dh,A,A      ; Carriage return? 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   20

         0002fa 000D 
 A   847 0002fb F845          bc      nextio,AEQ
         0002fc 0321'
 A   848 0002fd F640          ld      B,0,A
 A   849 0002fe F010          sub     #002Bh,A,A      ; +? 
         0002ff 002B 
 A   850 000300 F845          bc      nextio,AEQ
         000301 0321'
 A   851 000302 F640          ld      B,0,A
 A   852 000303 F010          sub     #002Dh,A,A      ; -? 
         000304 002D 
 A   853 000305 F845          bc      previo,AEQ
         000306 0326'
 A   854 000307 F640          ld      B,0,A
 A   855 000308 F010          sub     #0020h,A,A      ; Space? 
         000309 0020 
 A   856 00030a F845          bc      sameio,AEQ
         00030b 0316'
 A   857 00030c F640          ld      B,0,A
 A   858 00030d F010          sub     #001Bh,A,A      ; Escape? 
         00030e 001B 
 A   859 00030f F845          bc      quitio,AEQ
         000310 032B'
 A   860 000311 F640          ld      B,0,A
 A   861 000312 F010          sub     #003Bh,A,A      ; Semicolon? 
         000313 003B 
 A   862 000314 F845          bc      quitio,AEQ
         000315 032B'
 A   863              
 A   864 000316       sameio:
 A   865 000316 E80D          ld      #000Dh,A        ; Output CR 
 A   866 000317 F074          call    asx
         000318 016F'
 A   867 000319 E80A          ld      #000Ah,A        ; LF 
 A   868 00031a F074          call    asx
         00031b 016F'
 A   869 00031c 4810          ldm     AR0,A           ; Get new address 
 A   870 00031d F074          call    dis4hex         ; Display address 
         00031e 048A'
 A   871 00031f F073          b       modio           ; Go get data and display 
         000320 02C1'
 A   872 000321       nextio:
 A   873 000321 6D90          mar     *AR0+           ; Inc address 
 A   874 000322 F495          nop
 A   875 000323 F495          nop
 A   876 000324 F073          b       sameio          ;
         000325 0316'
 A   877 000326       previo:
 A   878 000326 6D88          mar     *AR0-           ; Dec address
 A   879 000327 F495          nop
 A   880 000328 F495          nop
 A   881 000329 F073          b       sameio
         00032a 0316'
 A   882 00032b       quitio:
 A   883 00032b FC00          ret
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   21

 A   884               
 A   885              ;
 A   886              ; Output to I/O space at user-specified address
 A   887              ; A simplified version of Modify I/O, without read-before-write
 A   888              ;
 A   889              ; New for version 1.08, 4 Sept. 2006
 A   890              ; Added "repout" feature, 1.09, 6 Sept. 2006, to allow
 A   891              ; repeat of output function with same data and address
 A   892              ; as previous output by typing "R" for terminator
 A   893              ; Added semicolon terminator, 9 Sept. 2006
 A   894              ;
 A   895              ; Let assembler generate opcodes for portw, then
 A   896              ; routine modifies address word as needed
 A   897              ; Uses:
 A   898              ; AR0: I/O address
 A   899              ; AR1: Not used
 A   900              ; AR2: Points to address word of portw instruction
 A   901              ; AR3: Holds data to send to I/O port
 A   902              ;
 A   903              
 A   904 00032c       output:
 A   905              
 A   906 00032c 7712          stm     #aportw4,AR2    ; Point to port write instruction address
         00032d 0342'
 A   907 00032e 6D92          mar     *AR2+           ; Point to write port address word
 A   908 00032f F495          nop
 A   909 000330 F495          nop
 A   910              
 A   911 000331 E820          ld      #0020h,A        ; Space over on screen 
 A   912 000332 F074          call    asx
         000333 016F'
 A   913 000334 F074          call    inp4hex         ; Get I/O address 
         000335 0467'
 A   914 000336 8810          stlm    A,AR0           ; Save to AR0 for use as pointer 
 A   915              
 A   916 000337       modout:
 A   917 000337 4810          ldm     AR0,A           ; Restore I/O address in accumulator 
 A   918 000338 8082          stl     A,*AR2          ; Save address to output instruction 
 A   919 000339 E820          ld      #0020h,A        ; Space over on screen 
 A   920 00033a F074          call    asx
         00033b 016F'
 A   921 00033c F074          call    inp4hex         ; Get output data 
         00033d 0467'
 A   922 00033e 8813          stlm    A,AR3           ; AR3 holds output data 
 A   923 00033f       trmout:
 A   924 00033f F074          call    asr             ; Get terminator 
         000340 0183'
 A   925 000341 F540          ld      A,0,B           ; Save copy
 A   926                                              ; Modify port AFTER terminator is typed
 A   927 000342       aportw4:
 A   928 000342 7513          portw   AR3,0000h       ; Address is modified as needed
         000343 0000 
 A   929                      
 A   930 000344 F640          ld      B,0,A 
 A   931 000345 F010          sub     #000Dh,A,A      ; Carriage return? 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   22

         000346 000D 
 A   932 000347 F845          bc      nextout,AEQ
         000348 0383'
 A   933 000349 F640          ld      B,0,A
 A   934 00034a F010          sub     #002Bh,A,A      ; +? 
         00034b 002B 
 A   935 00034c F845          bc      nextout,AEQ
         00034d 0383'
 A   936 00034e F640          ld      B,0,A
 A   937 00034f F010          sub     #002Dh,A,A      ; -? 
         000350 002D 
 A   938 000351 F845          bc      prevout,AEQ
         000352 0388'
 A   939 000353 F640          ld      B,0,A
 A   940 000354 F010          sub     #0020h,A,A      ; Space? 
         000355 0020 
 A   941 000356 F845          bc      sameout,AEQ
         000357 0367'
 A   942 000358 F640          ld      B,0,A
 A   943 000359 F010          sub     #0052h,A,A      ; R: Repeat data and address? 
         00035a 0052 
 A   944 00035b F845          bc      repout,AEQ
         00035c 0372'
 A   945 00035d F640          ld      B,0,A
 A   946 00035e F010          sub     #001Bh,A,A      ; Escape? 
         00035f 001B 
 A   947 000360 F845          bc      quitout,AEQ
         000361 038D'
 A   948 000362 F640          ld      B,0,A
 A   949 000363 F010          sub     #003Bh,A,A      ; Semicolon? 
         000364 003B 
 A   950 000365 F845          bc      quitout,AEQ
         000366 038D'
 A   951              
 A   952 000367       sameout:
 A   953 000367 E80D          ld      #000Dh,A        ; Output CR 
 A   954 000368 F074          call    asx
         000369 016F'
 A   955 00036a E80A          ld      #000Ah,A        ; LF 
 A   956 00036b F074          call    asx
         00036c 016F'
 A   957 00036d 4810          ldm     AR0,A           ; Get new address 
 A   958 00036e F074          call    dis4hex         ; Display address 
         00036f 048A'
 A   959 000370 F073          b       modout          ; Go get output data and display 
         000371 0337'
 A   960              
 A   961 000372       repout:
 A   962 000372 E80D          ld      #000Dh,A        ; Output CR 
 A   963 000373 F074          call    asx
         000374 016F'
 A   964 000375 E80A          ld      #000Ah,A        ; LF 
 A   965 000376 F074          call    asx
         000377 016F'
 A   966 000378 4810          ldm     AR0,A           ; Get address 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   23

 A   967 000379 F074          call    dis4hex         ; Display address 
         00037a 048A'
 A   968 00037b E820          ld      #0020h,A        ; Space over on screen 
 A   969 00037c F074          call    asx
         00037d 016F'
 A   970 00037e 4813          ldm     AR3,A           ; AR3 holds data from previous output
 A   971 00037f F074          call    dis4hex
         000380 048A'
 A   972 000381 F073          b       trmout          ; Go get terminator 
         000382 033F'
 A   973              
 A   974 000383       nextout:
 A   975 000383 6D90          mar     *AR0+           ; Inc address 
 A   976 000384 F495          nop
 A   977 000385 F495          nop
 A   978 000386 F073          b       sameout         ;
         000387 0367'
 A   979 000388       prevout:
 A   980 000388 6D88          mar     *AR0-           ; Dec address
 A   981 000389 F495          nop
 A   982 00038a F495          nop
 A   983 00038b F073          b       sameout
         00038c 0367'
 A   984 00038d       quitout:
 A   985 00038d FC00          ret
 A   986              ;
 A   987              ; Modify data memory at user-specified address
 A   988              ;
 A   989              ; Added semicolon terminator 9 Sept. 2006
 A   990              ;
 A   991 00038e       modify:
 A   992 00038e E820          ld      #0020h,A        ; Space over on screen 
 A   993 00038f F074          call    asx
         000390 016F'
 A   994 000391 F074          call    inp4hex         ; Get address 
         000392 0467'
 A   995 000393 8810          stlm    A,AR0           ; Save to AR0 for use as pointer 
 A   996 000394       moddata:
 A   997 000394 E820          ld      #0020h,A        ; Space over on screen 
 A   998 000395 F074          call    asx
         000396 016F'
 A   999 000397 1280          ldu     *AR0,A          ; Get data at address 
 A  1000 000398 F074          call    dis4hex         ; Display 
         000399 048A'
 A  1001 00039a E820          ld      #0020h,A        ; Space over 
 A  1002 00039b F074          call    asx
         00039c 016F'
 A  1003 00039d F074          call    asr             ; Get response 
         00039e 0183'
 A  1004 00039f F540          ld      A,0,B           ; Save copy 
 A  1005 0003a0 F010          sub     #000Dh,A,A      ; Carriage return? 
         0003a1 000D 
 A  1006 0003a2 F845          bc      next,AEQ
         0003a3 03EF'
 A  1007 0003a4 F640          ld      B,0,A
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   24

 A  1008 0003a5 F010          sub     #002Bh,A,A      ; +? 
         0003a6 002B 
 A  1009 0003a7 F845          bc      next,AEQ
         0003a8 03EF'
 A  1010 0003a9 F640          ld      B,0,A
 A  1011 0003aa F010          sub     #002Dh,A,A      ; -? 
         0003ab 002D 
 A  1012 0003ac F845          bc      prev,AEQ
         0003ad 03F4'
 A  1013 0003ae F640          ld      B,0,A
 A  1014 0003af F010          sub     #0020h,A,A      ; Space? 
         0003b0 0020 
 A  1015 0003b1 F845          bc      same,AEQ
         0003b2 03E4'
 A  1016 0003b3 F640          ld      B,0,A
 A  1017 0003b4 F010          sub     #001Bh,A,A      ; Escape? 
         0003b5 001B 
 A  1018 0003b6 F845          bc      quit,AEQ
         0003b7 03F9'
 A  1019 0003b8 F640          ld      B,0,A
 A  1020 0003b9 F010          sub     #003Bh,A,A      ; Semicolon? 
         0003ba 003B 
 A  1021 0003bb F845          bc      quit,AEQ
         0003bc 03F9'
 A  1022              
 A  1023 0003bd F640          ld      B,0,A           ; Assume new data 
 A  1024 0003be F074          call    inp3hex         ; Echo MS nybble and get 3 remaining nybbles 
         0003bf 046C'
 A  1025 0003c0 8813          stlm    A,AR3           ; AR3 holds new data 
 A  1026              
 A  1027              
 A  1028 0003c1 F074          call    asr             ; Get terminator 
         0003c2 0183'
 A  1029 0003c3 F540          ld      A,0,B           ; Save copy 
 A  1030              
 A  1031 0003c4 4813          ldm     AR3,A           ; Get new data
 A  1032 0003c5 8080          stl     A,*AR0          ; Save data at address AFTER terminator is typed 
 A  1033              
 A  1034 0003c6 F640          ld      B,0,A
 A  1035 0003c7 F010          sub     #000Dh,A,A      ; Carriage return? 
         0003c8 000D 
 A  1036 0003c9 F845          bc      next,AEQ
         0003ca 03EF'
 A  1037 0003cb F640          ld      B,0,A
 A  1038 0003cc F010          sub     #002Bh,A,A      ; +? 
         0003cd 002B 
 A  1039 0003ce F845          bc      next,AEQ
         0003cf 03EF'
 A  1040 0003d0 F640          ld      B,0,A
 A  1041 0003d1 F010          sub     #002Dh,A,A      ; -? 
         0003d2 002D 
 A  1042 0003d3 F845          bc      prev,AEQ
         0003d4 03F4'
 A  1043 0003d5 F640          ld      B,0,A
 A  1044 0003d6 F010          sub     #0020h,A,A      ; Space? 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   25

         0003d7 0020 
 A  1045 0003d8 F845          bc      same,AEQ
         0003d9 03E4'
 A  1046 0003da F640          ld      B,0,A
 A  1047 0003db F010          sub     #001Bh,A,A      ; Escape? 
         0003dc 001B 
 A  1048 0003dd F845          bc      quit,AEQ
         0003de 03F9'
 A  1049 0003df F640          ld      B,0,A
 A  1050 0003e0 F010          sub     #003Bh,A,A      ; Semicolon? 
         0003e1 003B 
 A  1051 0003e2 F845          bc      quit,AEQ
         0003e3 03F9'
 A  1052              
 A  1053 0003e4       same:
 A  1054 0003e4 E80D          ld      #000Dh,A        ; Output CR 
 A  1055 0003e5 F074          call    asx
         0003e6 016F'
 A  1056 0003e7 E80A          ld      #000Ah,A        ; LF 
 A  1057 0003e8 F074          call    asx
         0003e9 016F'
 A  1058 0003ea 4810          ldm     AR0,A           ; Get new address 
 A  1059 0003eb F074          call    dis4hex         ; Display address 
         0003ec 048A'
 A  1060 0003ed F073          b       moddata         ; Go get data and display 
         0003ee 0394'
 A  1061                                              ; Previous address 
 A  1062 0003ef       next:
 A  1063 0003ef 6D90          mar     *AR0+           ; Go to next address
 A  1064 0003f0 F495          nop
 A  1065 0003f1 F495          nop  
 A  1066 0003f2 F073          b       same            ; 
         0003f3 03E4'
 A  1067 0003f4       prev:
 A  1068 0003f4 6D88          mar     *AR0-           ; Go to previous address
 A  1069 0003f5 F495          nop
 A  1070 0003f6 F495          nop  
 A  1071 0003f7 F073          b       same            ;
         0003f8 03E4'
 A  1072 0003f9       quit:
 A  1073 0003f9 FC00          ret
 A  1074              ;
 A  1075              ; Go execute at user-specified address
 A  1076              ; ret instruction in target code will return to monitor
 A  1077              ; Uses AR4 for temporary storage
 A  1078              ;
 A  1079 0003fa       go:
 A  1080 0003fa E820          ld      #0020h,A        ; Space over on screen 
 A  1081 0003fb F074          call    asx
         0003fc 016F'
 A  1082 0003fd F074          call    inp4hex         ; Get address 
         0003fe 0467'
 A  1083 0003ff 8814          stlm    A,AR4           ; Save copy 
 A  1084 000400 E820          ld      #0020h,A        ; Space over 
 A  1085 000401 F074          call    asx
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   26

         000402 016F'
 A  1086 000403 F074          call    asr             ; Get response 
         000404 0183'
 A  1087 000405 F010          sub     #000Dh,A,A      ; Carriage return? 
         000406 000D 
 A  1088 000407 F845          bc      launch,AEQ      ; Launch code at address specified
         000408 040A'
 A  1089 000409 FC00          ret                     ; Any other key- return to main 
 A  1090 00040a       launch:
 A  1091 00040a 4814          ldm     AR4,A           ; Restore accumulator 
 A  1092 00040b F4E2          bacc    A               ; Branch to address in accumulator 
 A  1093              ;
 A  1094              ; Display memory
 A  1095              ;
 A  1096              ; Uses AR0 to index through memory
 A  1097              ;      AR1 to limit word count
 A  1098              ;      AR2 to control number of words per line displayed
 A  1099              ;
 A  1100 00040c       display:
 A  1101 00040c E820          ld      #0020h,A        ; Space over on screen 
 A  1102 00040d F074          call    asx
         00040e 016F'
 A  1103 00040f F074          call    inp4hex         ; Get address 
         000410 0467'
 A  1104 000411 8810          stlm    A,AR0           ; Save to pointer 
 A  1105 000412 E820          ld      #0020h,A        ; Space over on screen 
 A  1106 000413 F074          call    asx
         000414 016F'
 A  1107 000415 F074          call    inp4hex         ; Get number of words 
         000416 0467'
 A  1108 000417 8811          stlm    A,AR1           ; Save to word counter 
 A  1109 000418 F495          nop
 A  1110 000419 F495          nop
 A  1111 00041a 6D89          mar     *AR1-           ; Use word count -1 for loop control 
 A  1112 00041b F495          nop
 A  1113 00041c F495          nop
 A  1114              
 A  1115 00041d F074          call    asr             ; Get terminator 
         00041e 0183'
 A  1116 00041f F010          sub     #000Dh,A,A      ; Carriage return? 
         000420 000D 
 A  1117 000421 F845          bc      line,AEQ        ; Return typed- proceed with display
         000422 0424'
 A  1118 000423 FC00          ret                     ; Any other key- return to main 
 A  1119              
 A  1120 000424       line:
 A  1121 000424 E80D          ld      #000Dh,A        ; New line 
 A  1122 000425 F074          call   asx
         000426 016F'
 A  1123 000427 E80A          ld      #000Ah,A
 A  1124 000428 F074          call   asx
         000429 016F'
 A  1125 00042a E807          ld      #0007h,A        ; 8 words per line
 A  1126 00042b 8812          stlm    A,AR2           ; Save to line counter
 A  1127 00042c 4810          ldm     AR0,A           ; Get address
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   27

 A  1128 00042d F074          call    dis4hex         ; Display at beginning of line 
         00042e 048A'
 A  1129 00042f E820          ld      #0020h,A        ; Space over on screen 
 A  1130 000430 F074          call    asx
         000431 016F'
 A  1131 000432 E820          ld      #0020h,A        ; Space over on screen 
 A  1132 000433 F074          call    asx
         000434 016F'
 A  1133 000435       nword:
 A  1134 000435 1290          ldu     *AR0+,A         ; Get data at address, inc address 
 A  1135 000436 F074          call    dis4hex         ; Display
         000437 048A'
 A  1136 000438 E820          ld      #0020h,A        ; Space over 
 A  1137 000439 F074          call    asx
         00043a 016F'
 A  1138 00043b 6C89          banz    more,*AR1-      ; All words done? 
         00043c 043F'
 A  1139 00043d F073          b       done
         00043e 0443'
 A  1140 00043f       more:
 A  1141 00043f 6C8A          banz    nword,*AR2-     ; Get next word if not EOL 
         000440 0435'
 A  1142 000441 F073          b       line            ; Start new line if at EOL 
         000442 0424'
 A  1143 000443       done:
 A  1144 000443 FC00          ret
 A  1145              ;
 A  1146              ; Fill memory with word pattern
 A  1147              ;
 A  1148 000444       fill:
 A  1149 000444 E820          ld      #0020h,A        ; Space over on screen 
 A  1150 000445 F074          call    asx
         000446 016F'
 A  1151 000447 F074          call    inp4hex         ; Get address 
         000448 0467'
 A  1152 000449 8810          stlm    A,AR0           ; Save to pointer 
 A  1153 00044a E820          ld      #0020h,A        ; Space over on screen 
 A  1154 00044b F074          call    asx
         00044c 016F'
 A  1155 00044d F074          call    inp4hex         ; Get number of words 
         00044e 0467'
 A  1156 00044f 8811          stlm    A,AR1           ; Save to word counter
 A  1157 000450 F495          nop
 A  1158 000451 F495          nop
 A  1159 000452 6D89          mar     *AR1-           ; Use word count -1 for loop control 
 A  1160 000453 F495          nop
 A  1161 000454 F495          nop
 A  1162 000455 E820          ld      #0020h,A        ; Space over on screen 
 A  1163 000456 F074          call    asx
         000457 016F'
 A  1164 000458 F074          call    inp4hex         ; Get fill pattern
         000459 0467'
 A  1165 00045a 8812          stlm    A,AR2           ; Save fill pattern
 A  1166              
 A  1167 00045b F074          call    asr             ; Get terminator 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   28

         00045c 0183'
 A  1168 00045d F010          sub     #000Dh,A,A      ; Carriage return? 
         00045e 000D 
 A  1169 00045f F845          bc      fillp,AEQ       ; Return typed- proceed with fill
         000460 0462'
 A  1170 000461 FC00          ret                     ; Any other key- return to main 
 A  1171              
 A  1172 000462       fillp:  
 A  1173 000462 4812          ldm     AR2,A           ; Restore fill pattern 
 A  1174 000463       fill1:
 A  1175 000463 8090          stl     A,*AR0+         ; Store fill word at (AR0), increment AR0,
 A  1176 000464 6C89          banz    fill1,*AR1-     ; and loop until zero 
         000465 0463'
 A  1177 000466 FC00          ret
 A  1178              ;
 A  1179              ; Get 4 up to ASCII characters from serial port, build word in Acc
 A  1180              ; Entry points for situation where one character is already
 A  1181              ; entered, or for 2 characters only also provided
 A  1182              ; Note: had trouble with [or A,shift,B] so separated
 A  1183              ; shift and or operations.
 A  1184              ;
 A  1185              ; Be sure to clear accumulators A and B before calling 
 A  1186              ; inp3hex, inp2hex, or inp1hex.
 A  1187              ; 
 A  1188 000467       inp4hex:
 A  1189 000467 E800          ld      #0000h,A        ; Clear accumulator
 A  1190 000468 F540          ld      A,0,B           ; and buffer 
 A  1191 000469 F4BB          rsbx    C               ; Carry bit
 A  1192 00046a F074          call    asr             ; Get character 
         00046b 0183'
 A  1193 00046c       inp3hex:
 A  1194 00046c F074          call    asx             ; Echo 
         00046d 016F'
 A  1195 00046e F074          call    asc2hex         ; Convert to nybble 
         00046f 04BA'
 A  1196              ;       or      A,B             ; Shift and store 
 A  1197 000470 F540          ld      A,B             ; V1.06 fix- JCV (forces B = A, since B = ?
 A  1198 000471 F764          sfta    B,+4,B          ; upon entry)
 A  1199 000472       inp3tst:
 A  1200 000472 F074          call    asr             ; Get character 
         000473 0183'
 A  1201 000474 F074          call    asx             ; Echo 
         000475 016F'
 A  1202 000476 F074          call    asc2hex         ; Convert to nybble 
         000477 04BA'
 A  1203 000478 F1A0          or      A,B             ; Shift and store 
 A  1204 000479 F764          sfta    B,+4,B
 A  1205 00047a       inp2hex:                        ; Enter here to input 2 characters
 A  1206 00047a F074          call    asr             ; Get character 
         00047b 0183'
 A  1207 00047c       inp1hex:                        ; Enter here, already data in A, with B clear
 A  1208 00047c F074          call    asx             ; Echo 
         00047d 016F'
 A  1209 00047e F074          call    asc2hex         ; Convert to nybble
         00047f 04BA'
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   29

 A  1210 000480 F1A0          or      A,B             ; Shift and store 
 A  1211 000481 F764          sfta    B,+4,B 
 A  1212 000482 F074          call    asr             ; Get character 
         000483 0183'
 A  1213 000484 F074          call    asx             ; Echo
         000485 016F'
 A  1214 000486 F074          call    asc2hex         ; Convert to nybble 
         000487 04BA'
 A  1215              ;       and     #000Fh,A,A
 A  1216 000488 F2A0          or      B,A             ; Store final result in A for return 
 A  1217              ; Test
 A  1218              ;       call    dis4hex
 A  1219              
 A  1220 000489 FC00          ret
 A  1221              ;
 A  1222              ; Convert data in Acc to 4 ASCII characters and transmit on serial link
 A  1223              ; call with data in Acc
 A  1224              ;
 A  1225 00048a       dis4hex:
 A  1226 00048a F540          ld      A,0,B           ; Store a copy of the word in B
 A  1227 00048b F0F4          sftl    A,-12,A         ; JCV
 A  1228 00048c F074          call    hex2asc         ; Convert MS nybble to ASCII 
         00048d 04AE'
 A  1229 00048e F074          call    asx             ; Serial transmit 
         00048f 016F'
 A  1230              
 A  1231 000490 F658          ld      B,-8,A          ; Get copy, shift to next nybble 
 A  1232 000491 F074          call    hex2asc         ; Convert next nybble to ASCII 
         000492 04AE'
 A  1233 000493 F074          call    asx             ; Serial transmit 
         000494 016F'
 A  1234              
 A  1235 000495 F65C          ld      B,-4,A          ; Get copy, shift to next nybble 
 A  1236 000496 F074          call    hex2asc         ; Convert next nybble to ASCII 
         000497 04AE'
 A  1237 000498 F074          call    asx             ; Serial transmit 
         000499 016F'
 A  1238              
 A  1239 00049a F640          ld      B,0,A           ; Get copy 
 A  1240 00049b F074          call    hex2asc         ; Convert LS nybble to ASCII 
         00049c 04AE'
 A  1241 00049d F074          call    asx             ; Serial transmit
         00049e 016F'
 A  1242 00049f F640          ld      B,0,A           ; Restore accumulator A
 A  1243              
 A  1244 0004a0 FC00          ret
 A  1245              
 A  1246              ;
 A  1247              ; Convert low byte in Acc to 2 ASCII characters and transmit on serial link
 A  1248              ; call with data in Acc
 A  1249              ;
 A  1250 0004a1       dis2hex:
 A  1251 0004a1 F540          ld      A,0,B           ; Store a copy of the word in B
 A  1252              
 A  1253 0004a2 F65C          ld      B,-4,A          ; Get copy, shift to next nybble 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   30

 A  1254 0004a3 F074          call    hex2asc         ; Convert next nybble to ASCII 
         0004a4 04AE'
 A  1255 0004a5 F074          call    asx             ; Serial transmit 
         0004a6 016F'
 A  1256              
 A  1257 0004a7 F640          ld      B,0,A           ; Get copy 
 A  1258 0004a8 F074          call    hex2asc         ; Convert LS nybble to ASCII 
         0004a9 04AE'
 A  1259 0004aa F074          call    asx             ; Serial transmit
         0004ab 016F'
 A  1260 0004ac F640          ld      B,0,A           ; Restore accumulator A
 A  1261              
 A  1262 0004ad FC00          ret
 A  1263              ;
 A  1264              ; Convert low nybble in Acc to ASCII character (0-F)
 A  1265              ;
 A  1266 0004ae       hex2asc:
 A  1267 0004ae F030          and     #000Fh,A,A      ; Mask to low nybble 
         0004af 000F 
 A  1268 0004b0 F010          sub     #9,A,A
         0004b1 0009 
 A  1269 0004b2 F846          bc      hex21,AGT       ; Go fix values > 9 
         0004b3 04B7'
 A  1270 0004b4 F000          add     #039h,A,A       ; 9 ASCII 
         0004b5 0039 
 A  1271 0004b6 FC00          ret
 A  1272 0004b7       hex21:
 A  1273 0004b7 F000          add     #040h,A,A       ; @ = A - 1 
         0004b8 0040 
 A  1274 0004b9 FC00          ret
 A  1275              ;
 A  1276              ; Convert ASCII character in Acc to binary in low nybble
 A  1277              ;
 A  1278 0004ba       asc2hex:
 A  1279 0004ba F010          sub     #039h,A,A       ; subtract ASCII 9 character offset    
         0004bb 0039 
 A  1280 0004bc F847          bc      asc21,ALEQ      ; If result <= 0, must be in range 0..9 
         0004bd 04C3'
 A  1281                                              ; ASCII A..F - ASCII 9 = 8..13, make 10..15
 A  1282 0004be F000          add     #2,A,A
         0004bf 0002 
 A  1283 0004c0 F030          and     #000Fh,A,A      ; Mask to 4 bits 
         0004c1 000F 
 A  1284 0004c2 FC00          ret
 A  1285 0004c3       asc21:
 A  1286                                              ; ASCII 0..9 - 9 = -9..0, make 0..9
 A  1287 0004c3 F000          add     #9,A,A
         0004c4 0009 
 A  1288 0004c5 F030          and     #000Fh,A,A      ; Mask to 4 bits 
         0004c6 000F 
 A  1289 0004c7 FC00          ret
 A  1290              ;
 A  1291              ; Read/Modify RSP (AD6620) Registers
 A  1292              ;
 A  1293              ; This routine is unique to the Dartmouth monitor. The basic idea is to make
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   31

 A  1294              ; the AD6620 chip registers appear as a "wide" (40 bit) memory words with addresses
 A  1295              ; from 0000 to 030D hex, with a command structure similar to Modify. The user types:
 A  1296              ;
 A  1297              ; R aaaa dddddddddd (data, carriage return, +, -, space, escape, semicolon)
 A  1298              ; Carriage return or + displays next address, data
 A  1299              ; - displays previos address, data
 A  1300              ; Space bar repeats read of data at same address (use to watch for changes)
 A  1301              ; Escape or semicolon terminates the command
 A  1302              ; Entering data (0-9, A-F) followed by terminator modifies register
 A  1303              ; Semicolon allows for automated upload of text file for AD6620 set-up
 A  1304              ; This routine built from earlier "iomod" code
 A  1305              ; Does not use "self-modifying code", since AD6620 RSP occupies a fixed block
 A  1306              ; of 8 DSP I/O addresses
 A  1307              ;
 A  1308              ; Uses:
 A  1309              ; AR0: I/O address
 A  1310              ; AR3: Holds data to send to or read from I/O port
 A  1311              ;
 A  1312              
 A  1313 0004c8       rspmod:
 A  1314              
 A  1315 0004c8 E820          ld      #0020h,A        ; Space over on screen 
 A  1316 0004c9 F074          call    asx
         0004ca 016F'
 A  1317 0004cb F074          call    inp4hex         ; Get RSP register address 
         0004cc 0467'
 A  1318 0004cd 8810          stlm    A,AR0           ; Save to AR0 for later use 
 A  1319              ;
 A  1320              ; Transfer RSP register address bytes to AD6620 high and low address registers
 A  1321              ;
 A  1322 0004ce       rsp_modio:
 A  1323 0004ce 4810          ldm     AR0,A           ; Restore I/O address in accumulator 
 A  1324 0004cf F0F8          sftl    A,-8,A          ; Shift high byte to low byte
 A  1325 0004d0 F030          and     #0003h,A,A      ; Mask high byte to 2 LSBs (avoid reserved bits
         0004d1 0003 
 A  1326                                              ; and do not auto-increment for now)
 A  1327 0004d2 8813          stlm    A,AR3           ; Move to AR3 for portw
 A  1328 0004d3 7513          portw AR3,wr_rx+amr     ; Write to high address register
         0004d4 4007 
 A  1329 0004d5 4810          ldm     AR0,A           ; Get RSP register address
 A  1330 0004d6 F030          and     #00FFh,A,A      ; Mask to low byte only (actually hardware
         0004d7 00FF 
 A  1331                                              ; only uses bits 7:0 of data bus, should not
 A  1332                                              ; need to mask)
 A  1333 0004d8 8813          stlm    A,AR3
 A  1334 0004d9 7513          portw AR3,wr_rx+lar     ; Write to low address register
         0004da 4006 
 A  1335              
 A  1336 0004db E820          ld      #0020h,A        ; Space over on screen 
 A  1337 0004dc F074          call    asx
         0004dd 016F'
 A  1338 0004de       rsp_aportr3:
 A  1339 0004de 7413          portr   rd_rx+dr0,AR3   ; Get LS data byte of 40 bit word, no display
         0004df 4000 
 A  1340                                              ; This forces loading of higher bytes to AD6620
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   32

 A  1341                                              ; registers dr4, dr3, dr2, dr1
 A  1342 0004e0 7413          portr   rd_rx+dr4,AR3   ; Get MS data byte of 40 bit word
         0004e1 4004 
 A  1343 0004e2 4813          ldm     AR3,A           ; Get data at I/O address 
 A  1344 0004e3 F074          call    dis2hex         ; Display
         0004e4 04A1'
 A  1345 0004e5 7413          portr   rd_rx+dr3,AR3   ; Get 4th data byte of 40 bit word
         0004e6 4003 
 A  1346 0004e7 4813          ldm     AR3,A           ; Get data at I/O address 
 A  1347 0004e8 F074          call    dis2hex         ; Display
         0004e9 04A1'
 A  1348 0004ea 7413          portr   rd_rx+dr2,AR3   ; Get 3rd data byte of 40 bit word
         0004eb 4002 
 A  1349 0004ec 4813          ldm     AR3,A           ; Get data at I/O address 
 A  1350 0004ed F074          call    dis2hex         ; Display
         0004ee 04A1'
 A  1351 0004ef 7413          portr   rd_rx+dr1,AR3   ; Get 2nd data byte of 40 bit word
         0004f0 4001 
 A  1352 0004f1 4813          ldm     AR3,A           ; Get data at I/O address 
 A  1353 0004f2 F074          call    dis2hex         ; Display
         0004f3 04A1'
 A  1354 0004f4 7413          portr   rd_rx+dr0,AR3   ; Get LS data byte of 40 bit word
         0004f5 4000 
 A  1355 0004f6 4813          ldm     AR3,A           ; Get data at I/O address 
 A  1356 0004f7 F074          call    dis2hex         ; Display
         0004f8 04A1'
 A  1357 0004f9 E820          ld      #0020h,A        ; Space over 
 A  1358 0004fa F074          call    asx
         0004fb 016F'
 A  1359 0004fc F074          call    asr             ; Get response 
         0004fd 0183'
 A  1360 0004fe F540          ld      A,0,B           ; Save copy 
 A  1361 0004ff F010          sub     #000Dh,A,A      ; Carriage return? 
         000500 000D 
 A  1362 000501 F845          bc      rsp_nextio,AEQ
         000502 0567'
 A  1363 000503 F640          ld      B,0,A
 A  1364 000504 F010          sub     #002Bh,A,A      ; +? 
         000505 002B 
 A  1365 000506 F845          bc      rsp_nextio,AEQ
         000507 0567'
 A  1366 000508 F640          ld      B,0,A
 A  1367 000509 F010          sub     #002Dh,A,A      ; -? 
         00050a 002D 
 A  1368 00050b F845          bc      rsp_previo,AEQ
         00050c 056C'
 A  1369 00050d F640          ld      B,0,A
 A  1370 00050e F010          sub     #0020h,A,A      ; Space? 
         00050f 0020 
 A  1371 000510 F845          bc      rsp_sameio,AEQ
         000511 055C'
 A  1372 000512 F640          ld      B,0,A
 A  1373 000513 F010          sub     #001Bh,A,A      ; Escape? 
         000514 001B 
 A  1374 000515 F845          bc      rsp_quitio,AEQ
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   33

         000516 0571'
 A  1375 000517 F640          ld      B,0,A
 A  1376 000518 F010          sub     #003Bh,A,A      ; Semicolon? 
         000519 003B 
 A  1377 00051a F845          bc      rsp_quitio,AEQ
         00051b 0571'
 A  1378              
 A  1379 00051c F640          ld      B,0,A           ; Assume new data, put back into Acc 
 A  1380              ;
 A  1381              ; Get remaining nybbles of new data and store to AD6620 Data Registers 
 A  1382              ;
 A  1383 00051d E900          ld      #0000h,B        ; Clear B 
 A  1384 00051e F074          call    inp1hex         ; Echo MS nybble in A and get 1 remaining nybble 
         00051f 047C'
 A  1385 000520 8813          stlm    A,AR3           ; AR3 holds output data
 A  1386 000521 7513          portw   AR3,wr_rx+dr4   ; Store to AD6620 MS data byte register
         000522 4004 
 A  1387 000523 E900          ld      #0000h,B        ; Clear B 
 A  1388 000524 F074          call    inp2hex         ; Get next byte
         000525 047A'
 A  1389 000526 8813          stlm    A,AR3
 A  1390 000527 7513          portw   AR3,wr_rx+dr3
         000528 4003 
 A  1391 000529 E900          ld      #0000h,B        ; Clear B 
 A  1392 00052a F074          call    inp2hex         ; Get next byte
         00052b 047A'
 A  1393 00052c 8813          stlm    A,AR3
 A  1394 00052d 7513          portw   AR3,wr_rx+dr2
         00052e 4002 
 A  1395 00052f E900          ld      #0000h,B        ; Clear B 
 A  1396 000530 F074          call    inp2hex         ; Get next byte
         000531 047A'
 A  1397 000532 8813          stlm    A,AR3
 A  1398 000533 7513          portw   AR3,wr_rx+dr1
         000534 4001 
 A  1399 000535 E900          ld      #0000h,B        ; Clear B 
 A  1400 000536 F074          call    inp2hex         ; Get LS byte
         000537 047A'
 A  1401 000538 8813          stlm    A, AR3          ; Save for subsequent output port write
 A  1402               
 A  1403 000539 F074          call    asr             ; Get terminator 
         00053a 0183'
 A  1404 00053b F540          ld      A,0,B           ; Save copy
 A  1405                                              ; Modify AD6620 dr0 register AFTER terminator is typed
 A  1406                                              ; Note that write to dr0 causes AD6620 to transfer all 5 
 A  1407                                              ; data bytes to internal data address
 A  1408 00053c       rsp_aportw3:
 A  1409 00053c 7513          portw   AR3,wr_rx+dr0   ; Address for RSP LS data byte
         00053d 4000 
 A  1410                      
 A  1411 00053e F640          ld      B,0,A           ; Retrieve terminator character
 A  1412 00053f F010          sub     #000Dh,A,A      ; Carriage return? 
         000540 000D 
 A  1413 000541 F845          bc      rsp_nextio,AEQ
         000542 0567'
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   34

 A  1414 000543 F640          ld      B,0,A
 A  1415 000544 F010          sub     #002Bh,A,A      ; +? 
         000545 002B 
 A  1416 000546 F845          bc      rsp_nextio,AEQ
         000547 0567'
 A  1417 000548 F640          ld      B,0,A
 A  1418 000549 F010          sub     #002Dh,A,A      ; -? 
         00054a 002D 
 A  1419 00054b F845          bc      rsp_previo,AEQ
         00054c 056C'
 A  1420 00054d F640          ld      B,0,A
 A  1421 00054e F010          sub     #0020h,A,A      ; Space? 
         00054f 0020 
 A  1422 000550 F845          bc      rsp_sameio,AEQ
         000551 055C'
 A  1423 000552 F640          ld      B,0,A
 A  1424 000553 F010          sub     #001Bh,A,A      ; Escape? 
         000554 001B 
 A  1425 000555 F845          bc      rsp_quitio,AEQ
         000556 0571'
 A  1426 000557 F640          ld      B,0,A
 A  1427 000558 F010          sub     #003Bh,A,A      ; Semicolon? 
         000559 003B 
 A  1428 00055a F845          bc      rsp_quitio,AEQ
         00055b 0571'
 A  1429 00055c       rsp_sameio:
 A  1430 00055c E80D          ld      #000Dh,A        ; Output CR 
 A  1431 00055d F074          call    asx
         00055e 016F'
 A  1432 00055f E80A          ld      #000Ah,A        ; LF 
 A  1433 000560 F074          call    asx
         000561 016F'
 A  1434 000562 4810          ldm     AR0,A           ; Get new address 
 A  1435 000563 F074          call    dis4hex         ; Display address 
         000564 048A'
 A  1436 000565 F073          b       rsp_modio       ; Go get data and display 
         000566 04CE'
 A  1437 000567       rsp_nextio:
 A  1438 000567 6D90          mar     *AR0+           ; Inc address 
 A  1439 000568 F495          nop
 A  1440 000569 F495          nop
 A  1441 00056a F073          b       rsp_sameio      ;
         00056b 055C'
 A  1442 00056c       rsp_previo:
 A  1443 00056c 6D88          mar     *AR0-           ; Dec address
 A  1444 00056d F495          nop
 A  1445 00056e F495          nop
 A  1446 00056f F073          b       rsp_sameio
         000570 055C'
 A  1447 000571       rsp_quitio:
 A  1448 000571 FC00          ret
 A  1449              ;
 A  1450              ; Help strings/messages
 A  1451              ;
 A  1452              ; When modifying the pstrings, be sure to keep
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   35

 A  1453              ; the length an even number of characters- pad
 A  1454              ; with blanks as needed. If not, the assembler
 A  1455              ; will fill an unused byte with a null, and this
 A  1456              ; will terminate the message display early.
 A  1457              ;
 A  1458              
 A  1459 000572       version:
 A  1460 000572 0D0A          .word   0D0Ah
 A  1461 000573 5661          .pstring "Vandiver Electronics TMS320C542 Monitor "
         000574 6E64 
         000575 6976 
         000576 6572 
         000577 2045 
         000578 6C65 
         000579 6374 
         00057a 726F 
         00057b 6E69 
         00057c 6373 
         00057d 2054 
         00057e 4D53 
         00057f 3332 
         000580 3043 
         000581 3534 
         000582 3220 
         000583 4D6F 
         000584 6E69 
         000585 746F 
         000586 7220 
 A  1462 000587 0D0A          .word   0D0Ah
 A  1463 000588 5665          .pstring "Version 1.10, Dartmouth CHARM Rx-DSP, 23 December 2009"
         000589 7273 
         00058a 696F 
         00058b 6E20 
         00058c 312E 
         00058d 3130 
         00058e 2C20 
         00058f 4461 
         000590 7274 
         000591 6D6F 
         000592 7574 
         000593 6820 
         000594 4348 
         000595 4152 
         000596 4D20 
         000597 5278 
         000598 2D44 
         000599 5350 
         00059a 2C20 
         00059b 3233 
         00059c 2044 
         00059d 6563 
         00059e 656D 
         00059f 6265 
         0005a0 7220 
         0005a1 3230 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   36

         0005a2 3039 
 A  1464 0005a3 0D0A          .word   0D0Ah
 A  1465 0005a4 4D41          .pstring "MASTER, 23 December 2009"
         0005a5 5354 
         0005a6 4552 
         0005a7 2C20 
         0005a8 3233 
         0005a9 2044 
         0005aa 6563 
         0005ab 656D 
         0005ac 6265 
         0005ad 7220 
         0005ae 3230 
         0005af 3039 
 A  1466 0005b0 0D0A          .word   0D0Ah
 A  1467 0005b1       help:
 A  1468 0005b1 0D0A          .word   0D0Ah
 A  1469 0005b2 436F          .pstring "Command             Description "
         0005b3 6D6D 
         0005b4 616E 
         0005b5 6420 
         0005b6 2020 
         0005b7 2020 
         0005b8 2020 
         0005b9 2020 
         0005ba 2020 
         0005bb 2020 
         0005bc 4465 
         0005bd 7363 
         0005be 7269 
         0005bf 7074 
         0005c0 696F 
         0005c1 6E20 
 A  1470 0005c2 0D0A          .word   0D0Ah
 A  1471 0005c3 3F20          .pstring "?                   Display command list"
         0005c4 2020 
         0005c5 2020 
         0005c6 2020 
         0005c7 2020 
         0005c8 2020 
         0005c9 2020 
         0005ca 2020 
         0005cb 2020 
         0005cc 2020 
         0005cd 4469 
         0005ce 7370 
         0005cf 6C61 
         0005d0 7920 
         0005d1 636F 
         0005d2 6D6D 
         0005d3 616E 
         0005d4 6420 
         0005d5 6C69 
         0005d6 7374 
 A  1472 0005d7 0D0A          .word   0D0Ah
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   37

 A  1473 0005d8 4461          .pstring "Daaaa nnnn          Display nnnn words starting at aaaa "
         0005d9 6161 
         0005da 6120 
         0005db 6E6E 
         0005dc 6E6E 
         0005dd 2020 
         0005de 2020 
         0005df 2020 
         0005e0 2020 
         0005e1 2020 
         0005e2 4469 
         0005e3 7370 
         0005e4 6C61 
         0005e5 7920 
         0005e6 6E6E 
         0005e7 6E6E 
         0005e8 2077 
         0005e9 6F72 
         0005ea 6473 
         0005eb 2073 
         0005ec 7461 
         0005ed 7274 
         0005ee 696E 
         0005ef 6720 
         0005f0 6174 
         0005f1 2061 
         0005f2 6161 
         0005f3 6120 
 A  1474 0005f4 0D0A          .word   0D0Ah
 A  1475 0005f5 4761          .pstring "Gaaaa               Go execute from address aaaa"
         0005f6 6161 
         0005f7 6120 
         0005f8 2020 
         0005f9 2020 
         0005fa 2020 
         0005fb 2020 
         0005fc 2020 
         0005fd 2020 
         0005fe 2020 
         0005ff 476F 
         000600 2065 
         000601 7865 
         000602 6375 
         000603 7465 
         000604 2066 
         000605 726F 
         000606 6D20 
         000607 6164 
         000608 6472 
         000609 6573 
         00060a 7320 
         00060b 6161 
         00060c 6161 
 A  1476 00060d 0D0A          .word   0D0Ah
 A  1477 00060e 4678          .pstring "Fxxxx yyyy zzzz     Fill memory from xxxx to yyyy with zzzz "
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   38

         00060f 7878 
         000610 7820 
         000611 7979 
         000612 7979 
         000613 207A 
         000614 7A7A 
         000615 7A20 
         000616 2020 
         000617 2020 
         000618 4669 
         000619 6C6C 
         00061a 206D 
         00061b 656D 
         00061c 6F72 
         00061d 7920 
         00061e 6672 
         00061f 6F6D 
         000620 2078 
         000621 7878 
         000622 7820 
         000623 746F 
         000624 2079 
         000625 7979 
         000626 7920 
         000627 7769 
         000628 7468 
         000629 207A 
         00062a 7A7A 
         00062b 7A20 
 A  1478 00062c 0D0A          .word   0D0Ah
 A  1479 00062d 4970          .pstring "Ipppp dddd xxxx     I/O port read/modify (see Modify below) "
         00062e 7070 
         00062f 7020 
         000630 6464 
         000631 6464 
         000632 2078 
         000633 7878 
         000634 7820 
         000635 2020 
         000636 2020 
         000637 492F 
         000638 4F20 
         000639 706F 
         00063a 7274 
         00063b 2072 
         00063c 6561 
         00063d 642F 
         00063e 6D6F 
         00063f 6469 
         000640 6679 
         000641 2028 
         000642 7365 
         000643 6520 
         000644 4D6F 
         000645 6469 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   39

         000646 6679 
         000647 2062 
         000648 656C 
         000649 6F77 
         00064a 2920 
 A  1480 00064b 0D0A          .word   0D0Ah   
 A  1481 00064c 4C20          .pstring "L                   Load Intel Hex file "
         00064d 2020 
         00064e 2020 
         00064f 2020 
         000650 2020 
         000651 2020 
         000652 2020 
         000653 2020 
         000654 2020 
         000655 2020 
         000656 4C6F 
         000657 6164 
         000658 2049 
         000659 6E74 
         00065a 656C 
         00065b 2048 
         00065c 6578 
         00065d 2066 
         00065e 696C 
         00065f 6520 
 A  1482 000660 0D0A          .word   0D0Ah
 A  1483 000661 4D61          .pstring "Maaaa dddd xxxx     Modify memory at address aaaa "
         000662 6161 
         000663 6120 
         000664 6464 
         000665 6464 
         000666 2078 
         000667 7878 
         000668 7820 
         000669 2020 
         00066a 2020 
         00066b 4D6F 
         00066c 6469 
         00066d 6679 
         00066e 206D 
         00066f 656D 
         000670 6F72 
         000671 7920 
         000672 6174 
         000673 2061 
         000674 6464 
         000675 7265 
         000676 7373 
         000677 2061 
         000678 6161 
         000679 6120 
 A  1484 00067a 0D0A          .word   0D0Ah
 A  1485 00067b 2020          .pstring "                    dddd = displayed data, xxxx = entered "
         00067c 2020 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   40

         00067d 2020 
         00067e 2020 
         00067f 2020 
         000680 2020 
         000681 2020 
         000682 2020 
         000683 2020 
         000684 2020 
         000685 6464 
         000686 6464 
         000687 203D 
         000688 2064 
         000689 6973 
         00068a 706C 
         00068b 6179 
         00068c 6564 
         00068d 2064 
         00068e 6174 
         00068f 612C 
         000690 2078 
         000691 7878 
         000692 7820 
         000693 3D20 
         000694 656E 
         000695 7465 
         000696 7265 
         000697 6420 
 A  1486 000698 0D0A          .word   0D0Ah
 A  1487 000699 2020          .pstring "                    data (option), or one of the following: "
         00069a 2020 
         00069b 2020 
         00069c 2020 
         00069d 2020 
         00069e 2020 
         00069f 2020 
         0006a0 2020 
         0006a1 2020 
         0006a2 2020 
         0006a3 6461 
         0006a4 7461 
         0006a5 2028 
         0006a6 6F70 
         0006a7 7469 
         0006a8 6F6E 
         0006a9 292C 
         0006aa 206F 
         0006ab 7220 
         0006ac 6F6E 
         0006ad 6520 
         0006ae 6F66 
         0006af 2074 
         0006b0 6865 
         0006b1 2066 
         0006b2 6F6C 
         0006b3 6C6F 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   41

         0006b4 7769 
         0006b5 6E67 
         0006b6 3A20 
 A  1488 0006b7 0D0A          .word   0D0Ah
 A  1489 0006b8 2020          .pstring "                    ret, +: next, -: previous, ESC, semicolon: end M command"
         0006b9 2020 
         0006ba 2020 
         0006bb 2020 
         0006bc 2020 
         0006bd 2020 
         0006be 2020 
         0006bf 2020 
         0006c0 2020 
         0006c1 2020 
         0006c2 7265 
         0006c3 742C 
         0006c4 202B 
         0006c5 3A20 
         0006c6 6E65 
         0006c7 7874 
         0006c8 2C20 
         0006c9 2D3A 
         0006ca 2070 
         0006cb 7265 
         0006cc 7669 
         0006cd 6F75 
         0006ce 732C 
         0006cf 2045 
         0006d0 5343 
         0006d1 2C20 
         0006d2 7365 
         0006d3 6D69 
         0006d4 636F 
         0006d5 6C6F 
         0006d6 6E3A 
         0006d7 2065 
         0006d8 6E64 
         0006d9 204D 
         0006da 2063 
         0006db 6F6D 
         0006dc 6D61 
         0006dd 6E64 
 A  1490 0006de 0D0A          .word   0D0Ah
 A  1491 0006df 4F61          .pstring "Oaaaa dddd          Output data to address aaaa "
         0006e0 6161 
         0006e1 6120 
         0006e2 6464 
         0006e3 6464 
         0006e4 2020 
         0006e5 2020 
         0006e6 2020 
         0006e7 2020 
         0006e8 2020 
         0006e9 4F75 
         0006ea 7470 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   42

         0006eb 7574 
         0006ec 2064 
         0006ed 6174 
         0006ee 6120 
         0006ef 746F 
         0006f0 2061 
         0006f1 6464 
         0006f2 7265 
         0006f3 7373 
         0006f4 2061 
         0006f5 6161 
         0006f6 6120 
 A  1492 0006f7 0D0A          .word   0D0Ah
 A  1493 0006f8 2020          .pstring "                    dddd = entered data, type R to repeat address/data, or: "
         0006f9 2020 
         0006fa 2020 
         0006fb 2020 
         0006fc 2020 
         0006fd 2020 
         0006fe 2020 
         0006ff 2020 
         000700 2020 
         000701 2020 
         000702 6464 
         000703 6464 
         000704 203D 
         000705 2065 
         000706 6E74 
         000707 6572 
         000708 6564 
         000709 2064 
         00070a 6174 
         00070b 612C 
         00070c 2074 
         00070d 7970 
         00070e 6520 
         00070f 5220 
         000710 746F 
         000711 2072 
         000712 6570 
         000713 6561 
         000714 7420 
         000715 6164 
         000716 6472 
         000717 6573 
         000718 732F 
         000719 6461 
         00071a 7461 
         00071b 2C20 
         00071c 6F72 
         00071d 3A20 
 A  1494 00071e 0D0A          .word   0D0Ah
 A  1495 00071f 2020          .pstring "                    ret, +: next, -: previous, ESC, semicolon: end O command"
         000720 2020 
         000721 2020 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   43

         000722 2020 
         000723 2020 
         000724 2020 
         000725 2020 
         000726 2020 
         000727 2020 
         000728 2020 
         000729 7265 
         00072a 742C 
         00072b 202B 
         00072c 3A20 
         00072d 6E65 
         00072e 7874 
         00072f 2C20 
         000730 2D3A 
         000731 2070 
         000732 7265 
         000733 7669 
         000734 6F75 
         000735 732C 
         000736 2045 
         000737 5343 
         000738 2C20 
         000739 7365 
         00073a 6D69 
         00073b 636F 
         00073c 6C6F 
         00073d 6E3A 
         00073e 2065 
         00073f 6E64 
         000740 204F 
         000741 2063 
         000742 6F6D 
         000743 6D61 
         000744 6E64 
 A  1496 000745 0D0A          .word   0D0Ah
 A  1497 000746 5020          .pstring "P                   Program EEPROM with Intel Hex file"
         000747 2020 
         000748 2020 
         000749 2020 
         00074a 2020 
         00074b 2020 
         00074c 2020 
         00074d 2020 
         00074e 2020 
         00074f 2020 
         000750 5072 
         000751 6F67 
         000752 7261 
         000753 6D20 
         000754 4545 
         000755 5052 
         000756 4F4D 
         000757 2077 
         000758 6974 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   44

         000759 6820 
         00075a 496E 
         00075b 7465 
         00075c 6C20 
         00075d 4865 
         00075e 7820 
         00075f 6669 
         000760 6C65 
 A  1498 000761 0D0A          .word   0D0Ah
 A  1499 000762 5261          .pstring "Raaaa d40 x40       RSP register read/modify"
         000763 6161 
         000764 6120 
         000765 6434 
         000766 3020 
         000767 7834 
         000768 3020 
         000769 2020 
         00076a 2020 
         00076b 2020 
         00076c 5253 
         00076d 5020 
         00076e 7265 
         00076f 6769 
         000770 7374 
         000771 6572 
         000772 2072 
         000773 6561 
         000774 642F 
         000775 6D6F 
         000776 6469 
         000777 6679 
 A  1500 000778 0D0A          .word   0D0Ah
 A  1501 000779 2020          .pstring "                    d40 = displayed 40 bit data, x40 = entered  "
         00077a 2020 
         00077b 2020 
         00077c 2020 
         00077d 2020 
         00077e 2020 
         00077f 2020 
         000780 2020 
         000781 2020 
         000782 2020 
         000783 6434 
         000784 3020 
         000785 3D20 
         000786 6469 
         000787 7370 
         000788 6C61 
         000789 7965 
         00078a 6420 
         00078b 3430 
         00078c 2062 
         00078d 6974 
         00078e 2064 
         00078f 6174 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   45

         000790 612C 
         000791 2078 
         000792 3430 
         000793 203D 
         000794 2065 
         000795 6E74 
         000796 6572 
         000797 6564 
         000798 2020 
 A  1502 000799 0D0A          .word   0D0Ah
 A  1503 00079a 2020          .pstring "                    40 bit data data (option), or one of the following: "
         00079b 2020 
         00079c 2020 
         00079d 2020 
         00079e 2020 
         00079f 2020 
         0007a0 2020 
         0007a1 2020 
         0007a2 2020 
         0007a3 2020 
         0007a4 3430 
         0007a5 2062 
         0007a6 6974 
         0007a7 2064 
         0007a8 6174 
         0007a9 6120 
         0007aa 6461 
         0007ab 7461 
         0007ac 2028 
         0007ad 6F70 
         0007ae 7469 
         0007af 6F6E 
         0007b0 292C 
         0007b1 206F 
         0007b2 7220 
         0007b3 6F6E 
         0007b4 6520 
         0007b5 6F66 
         0007b6 2074 
         0007b7 6865 
         0007b8 2066 
         0007b9 6F6C 
         0007ba 6C6F 
         0007bb 7769 
         0007bc 6E67 
         0007bd 3A20 
 A  1504 0007be 0D0A          .word   0D0Ah
 A  1505 0007bf 2020          .pstring "                    ret, +: next, -: previous, ESC, semicolon: end R command"
         0007c0 2020 
         0007c1 2020 
         0007c2 2020 
         0007c3 2020 
         0007c4 2020 
         0007c5 2020 
         0007c6 2020 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   46

         0007c7 2020 
         0007c8 2020 
         0007c9 7265 
         0007ca 742C 
         0007cb 202B 
         0007cc 3A20 
         0007cd 6E65 
         0007ce 7874 
         0007cf 2C20 
         0007d0 2D3A 
         0007d1 2070 
         0007d2 7265 
         0007d3 7669 
         0007d4 6F75 
         0007d5 732C 
         0007d6 2045 
         0007d7 5343 
         0007d8 2C20 
         0007d9 7365 
         0007da 6D69 
         0007db 636F 
         0007dc 6C6F 
         0007dd 6E3A 
         0007de 2065 
         0007df 6E64 
         0007e0 2052 
         0007e1 2063 
         0007e2 6F6D 
         0007e3 6D61 
         0007e4 6E64 
 A  1506 0007e5 0D0A          .word   0D0Ah,0000h
         0007e6 0000 
 A  1507              
 A  1508              ;*****************************************************************************
 A  1509              ;
 A  1510              ; Dartmouth University CHARM Rx-DSP Program
 A  1511              ;
 A  1512              ; Written by: James C. Vandiver
 A  1513              ;
 A  1514              ; Vandiver Electronics
 A  1515              ; 741 Chase Road 
 A  1516              ; Huntsville, Alabama 35811
 A  1517              ;
 A  1518              ; (256) 851-7712
 A  1519              ;
 A  1520              ; 
 A  1521              ;
 A  1522              ; Revision History
 A  1523              ; 
 A  1524              ; Date        Version/Action
 A  1525              ; 23 Dec 2009 M11: Changed NCO center frequency to 2.67 MHz per Dartmouth
 A  1526              ;                  request.
 A  1527              ; 25 Mar 2009 M10: As received from Dartmouth on 23 December 2009.
 A  1528              ; 30 Oct 2006 M09: Major Frame Interrupt State machine mods. Forced reset
 A  1529              ;                  of both Rx and TLM FIFOs in state 0. This way, the
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   47

 A  1530              ;                  DSP does not wait for the TLM EFO flag- it forces the
 A  1531              ;                  empty condition, then fills the FIFO. Added state 3 to
 A  1532              ;                  be sure that TLM FIFO has time to empty out before starting
 A  1533              ;                  next sequence. Updated comments.  
 A  1534              ; 29 Oct 2006 M08: Slave code to reset TLM FIFO added (but commented out).
 A  1535              ;                  Minor comment updates.
 A  1536              ; 29 Oct 2006 M07: Updated interrupt state machine; added State 2 code
 A  1537              ;                  to wait until end of sequence before going back
 A  1538              ;                  to look at TLM FIFO empty flag in state 0.
 A  1539              ;                  Removed one NOP from rx_loop timing. 
 A  1540              ; 29 Oct 2006 M06: Cleared registers after call to rx_setup, in order to
 A  1541              ;                  have major frame and sequence counters start at 0.
 A  1542              ;                  Adjusted rx_loop time delay. 
 A  1543              ; 29 Oct 2006 M05: Loaded filter from m4510.xls. Also added watchdog strobe.
 A  1544              ; 28 Oct 2006 M04: Updated Rx FIFO read loop.
 A  1545              ; 28 Oct 2006 T04: Updated words/frame from 160 to 400, number of minor
 A  1546              ;                  frames per major from 40 to 6. Updated iq_len to 200
 A  1547              ;                  words (1/2 minor frame). Updated acq_seq length from
 A  1548              ;                  9600 to 2400 words (1 major frame). 
 A  1549              ; 27 Oct 2006 T03: Code to send headers and a counter, not real receiver data.
 A  1550              ;                  Lines commented out with ";test".
 A  1551              ; 24 Oct 2006 03: Fixed nco_loop exit condition.
 A  1552              ; 18 Oct 2006 02: Fixed major frame counter ms word branch in interrupt
 A  1553              ;             code (was branching back to "switch" instead of skipping
 A  1554              ;             ms word increment- added label skip_major_ms). Fixed branch
 A  1555              ;             to detect end of static header near "static". 
 A  1556              ;
 A  1557              ; 04 Oct 2006 Editing; clarified register usage for interrupt versus
 A  1558              ;             main code; Master/Slave differences; acq_seq and lsb_sel
 A  1559              ;             handling. First assembly.
 A  1560              ; 03 Oct 2006 First try appended to Monitor
 A  1561              ; 02 Oct 2006 Continued editing
 A  1562              ; 16 Sep 2006 Continued editing
 A  1563              ; 09 Sep 2006 Copied over from Iowa RACBE16, began editing.
 A  1564              ;
 A  1565              ;*****************************************************************************
 A  1566              ;
 A  1567              ; System-Specific Constants: Also see monitor section
 A  1568              ;
 A  1569              ;
 A  1570              ; Timer control constants (for test only)
 A  1571              ;
 A  1572        0000  ntddr   .set    0               ; Timer prescaler load value ("divide by 1")
 A  1573                                              ; See timer value calculations below
 A  1574        0010  ntss    .set    16              ; TSS (timer stop) bit in TCR
 A  1575        0020  nload   .set    32              ; TRB (timer reload bit) in TCR
 A  1576        095F  nprd    .set    2399            ; Minor frame test (60 us / 25 ns)/(ntddr+1)-1
 A  1577              ;
 A  1578        063F  nwait   .set    1599            ; (40 us / 25 ns)/(ntddr+1)-1
 A  1579              ;
 A  1580              ; Scratchpad RAM addresses
 A  1581              ; 
 A  1582              ;state: .set    60h             ; Major frame interrupt routine state
 A  1583              ;
 A  1584              ; Constants
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   48

 A  1585              ;
 A  1586        0029  major   .set    41              ; Major frames per Rx cycle (65536/1600)
 A  1587        0004  minor   .set    4               ; 4 minor frames per major frame
 A  1588        0190  word    .set    400             ; 400 words per minor frame
 A  1589        FFFF  depth   .set    0FFFFh  ; FIFO depth (65636) - 1.
 A  1590        00C8  iq_len .set 200         ; Number of words before I/Q off, LSB on (1/2 minor frame)
 A  1591                                      ; Also used on slave to set length of acq_seq_out
 A  1592        0640  acq_seq_len .set 1600   ; For possible use on Slave, number of words for acq_seq high
 A  1593                                      ; mainly for debug (= length of major frame)
 A  1594              ;
 A  1595              ; Discrete Outputs (at wr_disc)
 A  1596              ;
 A  1597        0001  par_tm_en       .set    1       ; Parallel telemetry enable (active low)
 A  1598        0002  lsb_sel .set    2       ; LSB/I_Q select, low for I_Q
 A  1599        0080  acq_seq_out     .set    128     ; ACQ_SEQ output bit 
 A  1600              ;
 A  1601              ; Discrete Inputs (at rd_disc)
 A  1602              ;
 A  1603        0001  disc_0          .set    1       ; Same as trm_28 at monitor level
 A  1604        0002  acq_seq_in      .set    2       ; Dartmouth slave ACQ_SEQ input
 A  1605        0004  tlm_ffo         .set    4       ; Telemetry FIFO full flag
 A  1606        0008  tlm_efo         .set    8       ; Telemetry FIFO empty flag
 A  1607        0010  tlm_hfo         .set    16      ; Telemetry FIFO half-full flag
 A  1608        0020  rx_ffo          .set    32      ; Rx FIFO full flag
 A  1609        0040  rx_efo          .set    64      ; Rx FIFO empty flag
 A  1610        0080  rx_hfo          .set    128     ; Rx FIFO half-full flag
 A  1611              ;
 A  1612              ; Interrupt flag bit masks: TMS320C542 nomenclature
 A  1613              ;
 A  1614        0001  int_0   .set    0001h           ; Interrupt 0 (major)
 A  1615        0002  int_1   .set    0002h           ; Interrupt 1 (minor)
 A  1616        0004  int_2   .set    0004h           ; Interrupt 2 (word- not used- boot-up issues)
 A  1617        0008  int_t   .set    0008h           ; Timer (for test purposes)
 A  1618              ;
 A  1619              ; Initialization
 A  1620              ;
 A  1621 0007e7       appcode:
 A  1622              ;       stm     #0,state        ; Clear interrupt routine state
 A  1623 0007e7 7710          stm     #0,AR0          ; Clear auxilliary register 0
         0007e8 0000 
 A  1624 0007e9 7510          portw   AR0,wr_rs_rx    ; Reset AD6620 RSP
         0007ea 0000 
 A  1625 0007eb 7510          portw   AR0,wr_disc     ; Enable parallel TLM drivers, I_Q out
         0007ec 8000 
 A  1626 0007ed 7510          portw   AR0,wr_dog      ; Strobe watchdog timer
         0007ee A000 
 A  1627 0007ef 7410          portr   rs_fifo,AR0     ; Clear TLM FIFO
         0007f0 C000 
 A  1628 0007f1 7410          portr   rs_rx_fifo,AR0  ; Clear Rx FIFO
         0007f2 A000 
 A  1629              ;
 A  1630              ; Set up AD6620 from table
 A  1631              ;
 A  1632 0007f3 F020          ld      #ad6620_filter,A ; Set up AD6620 filter
         0007f4 0915'
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   49

 A  1633 0007f5 F074          call    rsp_setup
         0007f6 08B5'
 A  1634              
 A  1635 0007f7 7710          stm     #0,AR0  ; Clear auxilliary registers
         0007f8 0000 
 A  1636 0007f9 7711          stm     #0,AR1
         0007fa 0000 
 A  1637 0007fb 7712          stm     #0,AR2
         0007fc 0000 
 A  1638 0007fd 7713          stm     #0,AR3
         0007fe 0000 
 A  1639 0007ff 7714          stm     #0,AR4
         000800 0000 
 A  1640 000801 7715          stm     #0,AR5
         000802 0000 
 A  1641 000803 7716          stm     #0,AR6
         000804 0000 
 A  1642 000805 7717          stm     #0,AR7
         000806 0000 
 A  1643              
 A  1644              ;
 A  1645              ; Test: Set up timer for 960us "minor frame" interrupts
 A  1646              ;
 A  1647              ;       stm     #ntss,TCR       ; Stop timer, load prescaler
 A  1648              ;       stm     #nprd,PRD       ; Load timer period register
 A  1649              ;       stm     #(nload+ntddr),TCR      ; Reset and start timer
 A  1650              ;
 A  1651              ; Flight: Use external interrupt signals to control code
 A  1652              ; Test: Use timer to simulate minor frame interrupts
 A  1653              ;
 A  1654 000807 7701          stm     #0FFh,IFR       ; Clear any pending interrupts
         000808 00FF 
 A  1655              ;       stm     #07h,IMR        ; ATII Enable MAJOR, MINOR, and WORD interrupts
 A  1656              ;       stm     #03h,IMR        ; RACE, APEX: Enable MAJOR and MINOR interrupts
 A  1657              ;*      stm     #08h,IMR        ;*TEST: Enable timer interrupts
 A  1658 000809 7700          stm     #01h,IMR        ; CHARM: Enable MAJOR interrupts
         00080a 0001 
 A  1659              
 A  1660 00080b F6BB          rsbx    INTM            ; Enable interrupts
 A  1661              ;  
 A  1662              ; Auxilliary Register Use            Main      Interrupt     
 A  1663              ; AR0: General purpose I/O           R/W       R/W      
 A  1664              ; AR1: General purpose index, main   R/W       not used 
 A  1665              ; AR2: TLM sequence word counter     R/W       R
 A  1666              ; AR3: Interrupt state               R         R/W 
 A  1667              ; AR4: Major frame count, LS         R/W       R
 A  1668              ; AR5: Major frame count, MS         R/W       R
 A  1669              ; AR6: TLM Sequence count, LS        R/W       not used
 A  1670              ; AR7: TLM Sequence count, MS        R/W       not used
 A  1671              ; A: Accumulator                     R/W       not used 
 A  1672              ; B: Accumulator                     not used  R/W
 A  1673              ;       
 A  1674              ; Note- only AR0 is R/W in both interrupt and main, and must
 A  1675              ; be saved on the stack during interrupts
 A  1676              ;
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   50

 A  1677              ; As of version M09, Master resets both the Rx and TLM fifos on
 A  1678              ; a  major frame interrupt (State 0). The Rx FIFO reset signal
 A  1679              ; is sent to the Slave Rx FIFO over a signal wire (both Master and Slave
 A  1680              ; Rx FIFOs are reset at the same time). The Master also sends the
 A  1681              ; acq_seq_out signal to the Slave and to the telemetry system to
 A  1682              ; denote the start of acquisition. 
 A  1683              ; 
 A  1684              ; Master begins to send header and receiver data once State 1 is
 A  1685              ; entered (this is sent to the main-line code by AR3, the interrupt
 A  1686              ; state register).
 A  1687              ;
 A  1688              ; Master clears acq_seq_out on next major frame interrupt, and transitions
 A  1689              ; from state 1 to state 2.
 A  1690              ;
 A  1691              ; Slave monitors acq_seq_in discrete bit, then clears the TLM FIFO
 A  1692              ; and begins to send header and read receiver data when acq_seq_in
 A  1693              ; goes high.
 A  1694              ;
 A  1695              ; Slave sets its own acq_seq_out high just before header transmission
 A  1696              ; starts, then resets after iq_len words sent.
 A  1697              ; 
 A  1698              ; For both Master and Slave, lsb_sel bit is initially low to send
 A  1699              ; I/Q bits, then set high after 200 words are sent (includes header
 A  1700              ; + 175 I/Q data words). Remaining data has true LSB from AD6620.
 A  1701              ;
 A  1702              ; Sequence length is FIFO "depth" (65535) words long. The State machine
 A  1703              ; looks at the word count, maintained in AR2, to determine when to 
 A  1704              ; transition from State 2 to State 3.
 A  1705              ;
 A  1706              ; State 3 is an "idle" state, allowing 1 Major frame for the TLM
 A  1707              ; FIFO to become empty.
 A  1708              ;
 A  1709              ; Header Format
 A  1710              ;  16 words fixed sequence "Dartmouth College Master Rx-DSP " or
 A  1711              ;                         "Dartmouth College Slave Rx-DSP  "
 A  1712              ;   2 words sequence count
 A  1713              ;   2 words major frame count
 A  1714              ;   1 word discrete
 A  1715              ;   4 words NCO control (denotes band center)
 A  1716              ; 175 words I/Q data, with LSB for I = 1, Q = 0  
 A  1717              ;
 A  1718              ; After header, data with true LSB starts, continuing established
 A  1719              ; I/Q alternating pattern
 A  1720              ; 
 A  1721              ;
 A  1722              ; Wait for interrupts, check state
 A  1723              ;
 A  1724              
 A  1725 00080c       wait:
 A  1726              ;
 A  1727              ; Master: Wait for state change for interrupt routine
 A  1728              ;
 A  1729 00080c 6013          cmpm    AR3,#1  ; State = 1: TLM FIFO has been reset, so
         00080d 0001 
 A  1730                                              ; transfer data to TLM
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   51

 A  1731              ;
 A  1732              ; Slave: Wait for acq_seq_in to go high
 A  1733              ;
 A  1734              ;S      portr   rd_disc,AR0     ; Get discrete input bits
 A  1735              ;S      ldm     AR0,A
 A  1736              ;S      and     #acq_seq_in,A   ; Mask to acquiring sequence input from Master
 A  1737              ;S      stlm    A,AR0
 A  1738              ;S      cmpm    AR0,#acq_seq_in ; See if Master has set acq_seq
 A  1739                                              ; If zero, wait 
 A  1740              
 A  1741 00080e FA20          bcd     wait,NTC        ; Delayed branch followed by 2 nops-
         00080f 080C'
 A  1742 000810 F495          nop                     ; Interruptible code
 A  1743 000811 F495          nop
 A  1744              ;
 A  1745              ; Slave: Turn on acq_seq_out, keep lsb_sel low (I/Q bit out) clear TLM FIFO
 A  1746              ;
 A  1747              ;S      stm     #acq_seq_out, AR0       ; Discrete outputs: lsb_sel low, acq_seq_out high
 A  1748              ;S      portw   AR0,wr_disc     ;
 A  1749              ;S      portr   rs_fifo,AR0             ; Reset TLM FIFO
 A  1750              
 A  1751              ;
 A  1752              ; Static header transmission
 A  1753              ;
 A  1754 000812 7712          stm     #0,AR2          ; Zero TLM sequence word count
         000813 0000 
 A  1755 000814 7711          stm     #static_header,AR1      ; Point to static header words
         000815 08E8'
 A  1756 000816       static:
 A  1757 000816 1091          ld      *AR1+,A         ; Get a word, point to next
 A  1758 000817 8810          stlm    A,AR0           ; Check for end of static header
 A  1759 000818 6010          cmpm    AR0,#0          ; Null terminator?
         000819 0000 
 A  1760 00081a F830          bc      static_x,TC             ; If terminator, end static header
         00081b 0821'
 A  1761 00081c 7510          portw   AR0,wr_out              ; Write to telemetry
         00081d C000 
 A  1762 00081e 6D92          mar     *AR2+           ; Keep word count
 A  1763 00081f F073          b       static
         000820 0816'
 A  1764 000821       static_x:
 A  1765              ;
 A  1766              ; Dynamic header words
 A  1767              ;
 A  1768 000821 4817          ldm     AR7,A           ; Get MS word of TLM sequence count
 A  1769 000822 8810          stlm    A,AR0
 A  1770 000823 7510          portw   AR0,wr_out      ; Write to telemetry FIFO
         000824 C000 
 A  1771 000825 6D92          mar     *AR2+
 A  1772 000826 4816          ldm     AR6,A           ; Get LS word of TLM sequence count
 A  1773 000827 8810          stlm    A,AR0
 A  1774 000828 7510          portw   AR0,wr_out      ; Write to telemetry FIFO
         000829 C000 
 A  1775 00082a 6D92          mar     *AR2+
 A  1776              
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   52

 A  1777 00082b 4815          ldm     AR5,A           ; Get MS word of major frame count
 A  1778 00082c 8810          stlm    A,AR0
 A  1779 00082d 7510          portw   AR0,wr_out      ; Write to telemetry FIFO
         00082e C000 
 A  1780 00082f 6D92          mar     *AR2+
 A  1781 000830 4814          ldm     AR4,A           ; Get LS word of major frame count
 A  1782 000831 8810          stlm    A,AR0
 A  1783 000832 7510          portw   AR0,wr_out      ; Write to telemetry FIFO
         000833 C000 
 A  1784 000834 6D92          mar     *AR2+
 A  1785              ;
 A  1786              ; Discrete inputs
 A  1787              ;
 A  1788 000835 F495          nop
 A  1789 000836 7410          portr   rd_disc,AR0     ; Get discrete input bits
         000837 8000 
 A  1790 000838 F495          nop
 A  1791 000839 7510          portw   AR0,wr_out      ; Write to telemetry FIFO 
         00083a C000 
 A  1792 00083b 6D92          mar     *AR2+
 A  1793              ;
 A  1794              ; Include 4 NCO Control words
 A  1795              ;
 A  1796              ; Note: If we decide to use several NCO frequencies, this code should
 A  1797              ; be updated to "grab" the active NCO control words
 A  1798              ;
 A  1799              ; 23 Dec 2009 changed to 2.67 MHz
 A  1800              ;
 A  1801 00083c 7711          stm     #NCO_2670_kHz,AR1 ; Use AR1 as index to NCO words 
         00083d 0C85'
 A  1802 00083e       nco_loop:
 A  1803 00083e 6011          cmpm    AR1,#NCO_2670_kHz+4     ; Is this the end of the table?
         00083f 0C89'
 A  1804                                                      ; 24 Oct JCV took out "*" before AR1 above
 A  1805 000840 F830          bc      nco_loopx,TC    ; Quit if at end        
         000841 0849'
 A  1806 000842 1091          ld      *AR1+,A         ; Get table word: AD6620 address
 A  1807 000843 8810          stlm    A,AR0           ; Move to AR0 for output
 A  1808 000844 7510          portw   AR0, wr_out
         000845 C000 
 A  1809 000846 6D92          mar     *AR2+           ; Keep count of words sent
 A  1810 000847 F073          b       nco_loop
         000848 083E'
 A  1811 000849       nco_loopx:
 A  1812              ;
 A  1813              ; Receiver data loop- revised 28 October 2006 JCV
 A  1814              ; Cycle times for instructions shown in []
 A  1815              ; I/O instructions have 7 wait states (default)
 A  1816              ; DSP has 25 ns clock cycle
 A  1817              ; Loop time goal is 1.5 usec < t < 1.6 usec with typical branches
 A  1818              ; 1.55 usec is 62 clock cycles
 A  1819              ; lsb_skip branch is false once per sequence
 A  1820              ;
 A  1821 000849       rx_loop:
 A  1822              
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   53

 A  1823 000849 7410          portr   rd_rx_out,AR0        ; [2+7] Get receiver data
         00084a 0000 
 A  1824 00084b 7510          portw   AR0,wr_out           ; [2+7] Write to TLM
         00084c C000 
 A  1825              ;test   portw AR2,wr_out           ; [2+7] Word count to TLM for test only- JCV 28 Oct. 2006
 A  1826              ;
 A  1827              ; Repeated nop for loop delay adjust
 A  1828              ;
 A  1829 00084d F7BD          ssbx    XF                   ; [1]Use XF to check rx_loop period and delay time
 A  1830 00084e EC1F          rpt     #31                  ; [1+ #N*1]...Add (1 + 31) clock cycles
 A  1831 00084f F495          nop                        ; Nop uses 1 cycle, repeated by above #N
 A  1832 000850 F6BD          rsbx    XF                   ; [1]Note: If ssbx/rsbx removed later, add 2 to #N 
 A  1833              
 A  1834 000851 6D92          mar     *AR2+                ; [1] Keep word count
 A  1835              
 A  1836 000852 6012          cmpm    AR2,#iq_len          ; [2] Send first 1/2 minor frame with I/Q bit
         000853 00C8 
 A  1837 000854 F820          bc      lsb_skip,NTC         ; [5 true (typ), 3 false] 
         000855 085A'
 A  1838 000856 7710          stm     #(lsb_sel+acq_seq_out), AR0     ; [2] Master: lsb_sel, acq_seq_out high
         000857 0082 
 A  1839              ;S      stm     #(lsb_sel), AR0 ; [2] Slave: lsb_sel high
 A  1840 000858 7510          portw   AR0,wr_disc          ; [2+7] LSB_SEL = 1 => true LS bit
         000859 8000 
 A  1841                      
 A  1842 00085a       lsb_skip:
 A  1843              ;
 A  1844              ; Slave (optional) - turn off acq_seq here based on number of words sent
 A  1845              ; Must adjust timing above if this is used
 A  1846              ;
 A  1847              ;S      cmpm    AR2,#acq_seq_len     ; [2] See if time to turn off acq_seq
 A  1848              ;S      bc      acq_skip,NTC         ; [5 true (typ), 3 false]
 A  1849              ;S      stm     #lsb_sel, AR0        ; [2] Turn off acq_seq, but keep lsb_sel high
 A  1850              ;S      portw   AR0,wr_disc          ; [2+7]
 A  1851 00085a       acq_skip:
 A  1852              ;
 A  1853              ; Both Master and Slave- check # of words sent, end sequence if max
 A  1854              ;
 A  1855 00085a 6012          cmpm    AR2,#depth      ;[2] Compare to max word count for sequence
         00085b FFFF 
 A  1856 00085c F820          bc      rx_loop,NTC ;[5 true (typ) 3 false] 
         00085d 0849'
 A  1857              ;
 A  1858              ; Sequence counter (32 bits, using AR6 and AR7)
 A  1859              ;
 A  1860 00085e 6D96          mar     *AR6+           ; Increment sequence count
 A  1861 00085f 6016          cmpm    AR6,#0          ; Has count rolled over?
         000860 0000 
 A  1862 000861 F820          bc      skip_ms, NTC
         000862 0864'
 A  1863 000863 6D97          mar     *AR7+           ; Increment upper word of sequence count
 A  1864 000864       skip_ms:
 A  1865              ;
 A  1866              ; Strobe watchdog- once per sequence
 A  1867              ; Note that JP30 hardware jumper must be installed to use this...
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   54

 A  1868              ; If JP30 is installed for flight, it must be removed whenever the
 A  1869              ; monitor is used (else there will be repeated resets)
 A  1870              ;
 A  1871 000864 7710          stm     #0, AR0        ; Data is not used- just the wr_dog strobe
         000865 0000 
 A  1872 000866 7510          portw   AR0,wr_dog     ; Strobe the watchdog
         000867 A000 
 A  1873              
 A  1874 000868 F273          bd      wait            ; Delayed branch, followed by 2 nops,
         000869 080C'
 A  1875 00086a F495          nop                     ; interruptible code
 A  1876 00086b F495          nop
 A  1877              ;
 A  1878              ; Timer interrupt 
 A  1879              ;
 A  1880 00086c       timer_int:
 A  1881              ;
 A  1882              ; Minor frame entry point
 A  1883              ;
 A  1884 00086c       minor_int:
 A  1885              ;
 A  1886              ; Major Frame Entry Point
 A  1887              ;
 A  1888              ; Covention: Use accumulator B in interrupt code only
 A  1889              ; Save AR0 on stack, restore at exit
 A  1890              
 A  1891 00086c       major_int:
 A  1892              ;       ssbx    XF              ; Use XF to check interrupt time
 A  1893 00086c 4A10          pshm    AR0             ; Save AR0 contents for use in main
 A  1894              ;
 A  1895              ; Slave code: Just count frames and return- state machine bypassed
 A  1896              ;
 A  1897              ;S      b       major_x
 A  1898              ;
 A  1899              ; Master- state selection
 A  1900              ;
 A  1901 00086d       switch:
 A  1902 00086d 6013          cmpm    AR3,#0          ; State 0: Clear Rx and TLM FIFOs, acq_seq out
         00086e 0000 
 A  1903 00086f F830          bc      start_of_seq,TC ; 
         000870 0881'
 A  1904 000871 6013          cmpm    AR3,#1          ; State 1: Turn off Acq_Seq bit
         000872 0001 
 A  1905 000873 F830          bc      acq_seq_off,TC
         000874 088E'
 A  1906 000875 6013          cmpm    AR3,#2          ; State 2: Wait for end of sequence (AR2 = depth)
         000876 0002 
 A  1907 000877 F830          bc      end_of_seq,TC
         000878 0897'
 A  1908 000879 6013          cmpm    AR3,#3          ; State 3: Allow TLM FIFO to empty
         00087a 0003 
 A  1909 00087b F830          bc      tlm_empty,TC
         00087c 089F'
 A  1910 00087d 7713          stm     #0,AR3          ; Invalid state: Force state 0
         00087e 0000 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   55

 A  1911              ;       portr   rs_fifo,AR0             ; Reset TLM FIFO
 A  1912 00087f F073          b       major_x         ; Go wait for next major frame
         000880 08A1'
 A  1913              
 A  1914              ;
 A  1915              ; State 0: Clear the FIFOs
 A  1916              ;
 A  1917 000881       start_of_seq:
 A  1918 000881 7410          portr   rs_rx_fifo,AR0    ; Reset Rx FIFO- also sent by wire to Slave
         000882 A000 
 A  1919                                                    ; THIS is where a sampling sequence begins
 A  1920              
 A  1921 000883 7710          stm     #acq_seq_out, AR0 ; Discrete outputs: acq_seq_out- wire to Slave
         000884 0080 
 A  1922 000885 7510          portw   AR0,wr_disc       ; Also, lsb_sel = 0 => I/Q bit
         000886 8000 
 A  1923 000887 F495          nop
 A  1924              
 A  1925 000888 7410          portr   rs_fifo,AR0       ; Reset the TLM FIFO
         000889 C000 
 A  1926 00088a 7713          stm     #1,AR3            ; Set interrupt state to 1
         00088b 0001 
 A  1927              
 A  1928 00088c F073          b       major_x
         00088d 08A1'
 A  1929              ;
 A  1930              ; State 1: Acquiring Sequence Bit (acq_seq_out) off, lsb_sel on
 A  1931              ;
 A  1932 00088e       acq_seq_off:
 A  1933 00088e 7710          stm     #lsb_sel, AR0     ; Discrete outputs: acq_seq_out low to Slave
         00088f 0002 
 A  1934 000890 7510          portw   AR0,wr_disc       ; lsb_sel = 1 => true LS bit (should have been set
         000891 8000 
 A  1935                                                      ; in main-line code)
 A  1936 000892 F495          nop
 A  1937 000893 7713          stm     #2,AR3            ; Set state to 2, wait for end of sequence
         000894 0002 
 A  1938 000895 F073          b       major_x
         000896 08A1'
 A  1939              ;
 A  1940              ; State 2: Check for end-of-sequence (AR2 = depth)
 A  1941              ;
 A  1942 000897       end_of_seq:
 A  1943 000897 6012          cmpm    AR2,#depth              ; See if all of sequence has been sent (AR2 holds word count)
         000898 FFFF 
 A  1944 000899 F820          bc      major_x,NTC             ; Stay in state 2 until end-of-sequence
         00089a 08A1'
 A  1945 00089b 7713          stm     #3,AR3          ; Set state to 3, allow TLM FIFO to empty
         00089c 0003 
 A  1946 00089d F073          b       major_x
         00089e 08A1'
 A  1947              ;
 A  1948              ; State 3: Major frame to allow TLM FIFO to empty
 A  1949              ;
 A  1950 00089f       tlm_empty:
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   56

 A  1951 00089f 7713          stm     #0,AR3          ; Set state back to zero, start new sequence
         0008a0 0000 
 A  1952                                                      ; on next Major Frame                                   
 A  1953 0008a1       major_x:
 A  1954              ;
 A  1955              ; Major frame counter (32 bits, using AR4 and AR5)
 A  1956              ;
 A  1957 0008a1 6D94          mar     *AR4+
 A  1958 0008a2 6014          cmpm    AR4,#0          ; Has count rolled over?
         0008a3 0000 
 A  1959 0008a4 F820          bc      skip_major_ms, NTC
         0008a5 08A7'
 A  1960 0008a6 6D95          mar     *AR5+           ; Increment upper word of major frame count
 A  1961              
 A  1962 0008a7       skip_major_ms:          ; 18 Oct. 2006 was branching to "switch"
 A  1963 0008a7 8A10          popm    AR0             ; Retrieve AR0 for use in main
 A  1964              ;       rsbx    XF
 A  1965              ;
 A  1966              ; Word Clock Interrupt
 A  1967              ; CHARM does not currently use this
 A  1968              ;
 A  1969 0008a8       word_int:
 A  1970 0008a8       word_x:
 A  1971 0008a8 F4EB          rete
 A  1972              ;
 A  1973              ; Test of AD6620 set-up from look-up table
 A  1974              ;
 A  1975              
 A  1976 0008a9       table_test:
 A  1977 0008a9 E80D          ld      #000Dh,A        ; Output CR 
 A  1978 0008aa F074          call    asx
         0008ab 016F'
 A  1979 0008ac E80A          ld      #000Ah,A        ; LF 
 A  1980 0008ad F074          call    asx
         0008ae 016F'
 A  1981              
 A  1982 0008af F020          ld      #ad6620_filter,A
         0008b0 0915'
 A  1983 0008b1 F074          call    rsp_setup
         0008b2 08B5'
 A  1984 0008b3 F073          b       appent
         0008b4 010E'
 A  1985              
 A  1986              ;
 A  1987              ; Load RSP (AD6620) Registers from Table
 A  1988              ;
 A  1989              ; 23 Dec 2009 took out most writes to terminal (msgout, dis4hex, asx)
 A  1990              ;
 A  1991              ; This code was taken directly from the "rspmod" routine used in the
 A  1992              ; Dartmouth Monitor. Instead of having the user enter the data words
 A  1993              ; or receiving them from a "script" file, this routine looks at a
 A  1994              ; table of words in memory, reads them, and transfers them to the
 A  1995              ; AD6620. Used to load control bytes and filter coefficients.
 A  1996              ;
 A  1997              ; Table entry format:
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   57

 A  1998              ;
 A  1999              ; rsp_table:
 A  2000              ;       .word   AmLah, r4r3h, r2r1h, r0xxh;
 A  2001              ;       .word   (more 4-word entries)
 A  2002              ;       .word   0FFFFh  ; End of table
 A  2003              ;
 A  2004              ; 4 words:
 A  2005              ; AAaah = AD6620 internal address, 0000h to 030Dh, or FFFFh to terminate.
 A  2006              ;         AMR = Ma Address mode register
 A  2007              ;         LAR = La Lower address register
 A  2008              ; r4r3h, r2r1h, r0xxh = data bytes, packed into words, MS, to LS. Bottom byte
 A  2009              ;         of 3rd word not used (xx). Data is treated a 40 bits for all
 A  2010              ;         AD6620 registers. Not the most compact arrangement for storage,
 A  2011              ;         but readable- and it can be edited directly from monitor scripts.
 A  2012              ;
 A  2013              ;         DR4 = r4
 A  2014              ;         DR3 = r3
 A  2015              ;         DR2 = r2
 A  2016              ;         DR1 = r1
 A  2017              ;         DR0 = r0 
 A  2018              ;
 A  2019              ; Uses:
 A  2020              ; A:   Holds table pointer upon entry 
 A  2021              ; B:   Working register
 A  2022              ; AR0: I/O address
 A  2023              ; AR2: Table index
 A  2024              ; AR3: Holds data to send to or read from I/O port
 A  2025              ;
 A  2026        FFFF  table_end .set 0FFFFh           ; End-of-table definition
 A  2027                      
 A  2028 0008b5       rsp_setup:                      ; Enter with table starting address in A
 A  2029 0008b5 8812          stlm    A,AR2           ; Save to AR2 for later use 
 A  2030              ;       ld      #ad6620_msg1,A  ; Tell operator what is happening
 A  2031              ;       call    msgout  
 A  2032              
 A  2033 0008b6       rsp_loop:
 A  2034              ;       ldm     AR2,A           ; Retrieve table index
 A  2035              ;       call    dis4hex         ; Display index of table line
 A  2036              ;       ld      #0020h,A        ; Space over on screen 
 A  2037              ;       call    asx
 A  2038              
 A  2039 0008b6 6082          cmpm    *AR2,#table_end ; Is this the end of the table?
         0008b7 FFFF 
 A  2040 0008b8 F830          bc      rspx,TC         ; Return if at end              
         0008b9 08E7'
 A  2041              
 A  2042 0008ba 1092          ld      *AR2+,A         ; Get first table word: AD6620 address
 A  2043 0008bb F540          ld      A,B             ; Save a copy
 A  2044              
 A  2045              ;       call    dis4hex         ; Display
 A  2046              ;
 A  2047              ; Transfer RSP register address bytes to AD6620 high and low address registers
 A  2048              ;
 A  2049 0008bc F0F8          sftl    A,-8,A          ; Shift high byte to low byte
 A  2050 0008bd F030          and     #0003h,A,A      ; Mask high byte to 2 LSBs (avoid reserved bits
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   58

         0008be 0003 
 A  2051                                              ; and do not auto-increment for now)
 A  2052 0008bf 8813          stlm    A,AR3           ; Move to AR3 for portw
 A  2053 0008c0 7513          portw AR3,wr_rx+amr     ; Write to high address register
         0008c1 4007 
 A  2054 0008c2 F640          ld      B,A             ; Get RSP register address
 A  2055 0008c3 F030          and     #00FFh,A,A      ; Mask to low byte only (actually hardware
         0008c4 00FF 
 A  2056                                              ; only uses bits 7:0 of data bus, should not
 A  2057                                              ; need to mask)
 A  2058 0008c5 8813          stlm    A,AR3
 A  2059 0008c6 7513          portw AR3,wr_rx+lar     ; Write to low address register
         0008c7 4006 
 A  2060              
 A  2061              ;       ld      #0020h,A        ; Space over
 A  2062              ;       call    asx
 A  2063              
 A  2064 0008c8 1092          ld      *AR2+,A         ; Get next table word (dr4 and dr3 bytes)
 A  2065 0008c9 F540          ld      A,B             ; Save a copy
 A  2066              
 A  2067              ;       call    dis4hex         ; Display
 A  2068              
 A  2069 0008ca F0F8          sftl    A,-8,A          ; Shift high byte to low byte
 A  2070 0008cb 8813          stlm    A,AR3           ; AR3 holds output data
 A  2071 0008cc 7513          portw   AR3,wr_rx+dr4   ; Store to AD6620 MS data byte register
         0008cd 4004 
 A  2072              
 A  2073 0008ce F640          ld      B,A             ; Get copy
 A  2074 0008cf F030          and     #00FFh,A,A      ; Mask to low byte only
         0008d0 00FF 
 A  2075 0008d1 8813          stlm    A,AR3
 A  2076 0008d2 7513          portw   AR3,wr_rx+dr3
         0008d3 4003 
 A  2077              
 A  2078              ;       ld      #0020h,A        ; Space over
 A  2079              ;       call    asx
 A  2080              
 A  2081 0008d4 1092          ld      *AR2+,A         ; Get next table word (dr2 and dr1 bytes)
 A  2082 0008d5 F540          ld      A,B             ; Save a copy
 A  2083              
 A  2084              ;       call    dis4hex         ; Display
 A  2085              
 A  2086 0008d6 F0F8          sftl    A,-8,A          ; Shift high byte to low byte
 A  2087 0008d7 8813          stlm    A,AR3
 A  2088 0008d8 7513          portw   AR3,wr_rx+dr2
         0008d9 4002 
 A  2089              
 A  2090 0008da F640          ld      B,A             ; Get copy
 A  2091 0008db F030          and     #00FFh,A,A      ; Mask to low byte only
         0008dc 00FF 
 A  2092 0008dd 8813          stlm    A,AR3
 A  2093 0008de 7513          portw   AR3,wr_rx+dr1
         0008df 4001 
 A  2094              
 A  2095              ;       ld      #0020h,A        ; Space over
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   59

 A  2096              ;       call    asx
 A  2097              
 A  2098 0008e0 1092          ld      *AR2+,A         ; Get next table word (dr0 in upper byte)
 A  2099              
 A  2100              ;       call    dis4hex         ; Display
 A  2101              
 A  2102 0008e1 F0F8          sftl    A,-8,A          ; Shift high byte to low byte
 A  2103 0008e2 8813          stlm    A, AR3          ; Save for subsequent output port write
 A  2104 0008e3 7513          portw   AR3,wr_rx+dr0   ; Address for RSP LS data byte
         0008e4 4000 
 A  2105              
 A  2106              ;       ld      #0020h,A        ; Space over
 A  2107              ;       call    asx
 A  2108              ;       ld      #000Dh,A        ; Output CR 
 A  2109              ;       call    asx
 A  2110              ;       ld      #000Ah,A        ; LF 
 A  2111              ;       call    asx
 A  2112              
 A  2113 0008e5 F073          b       rsp_loop        ; Go back for next table entry
         0008e6 08B6'
 A  2114 0008e7       rspx:
 A  2115              ;       ld      #ad6620_msg2,A
 A  2116              ;       call    msgout
 A  2117 0008e7 FC00          ret
 A  2118              
 A  2119              ;
 A  2120              ; Receiver telemetry static header
 A  2121              ;
 A  2122              ; Comment/uncomment as needed for master/slave
 A  2123              
 A  2124 0008e8       static_header:
 A  2125 0008e8 4461          .pstring        "Dartmouth College Master RxDSP  "
         0008e9 7274 
         0008ea 6D6F 
         0008eb 7574 
         0008ec 6820 
         0008ed 436F 
         0008ee 6C6C 
         0008ef 6567 
         0008f0 6520 
         0008f1 4D61 
         0008f2 7374 
         0008f3 6572 
         0008f4 2052 
         0008f5 7844 
         0008f6 5350 
         0008f7 2020 
 A  2126              ;S      .pstring        "Dartmouth College Slave  RxDSP  "
 A  2127 0008f8 0000          .word   0000h   ; Null terminator
 A  2128              ;
 A  2129              ; AD6620 set-up messages
 A  2130              ;
 A  2131              
 A  2132              
 A  2133 0008f9       ad6620_msg1:
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   60

 A  2134 0008f9 0D0A          .word   0D0Ah
 A  2135 0008fa 4144          .pstring "AD6620 set-up: MASTER "
         0008fb 3636 
         0008fc 3230 
         0008fd 2073 
         0008fe 6574 
         0008ff 2D75 
         000900 703A 
         000901 204D 
         000902 4153 
         000903 5445 
         000904 5220 
 A  2136              ;S    .pstring "AD6620 set-up: SLAVE  "
 A  2137 000905 0D0A          .word   0D0Ah,0000h
         000906 0000 
 A  2138 000907       ad6620_msg2:
 A  2139 000907 0D0A          .word   0D0Ah
 A  2140 000908 4144          .pstring "AD6620 set-up complete"
         000909 3636 
         00090a 3230 
         00090b 2073 
         00090c 6574 
         00090d 2D75 
         00090e 7020 
         00090f 636F 
         000910 6D70 
         000911 6C65 
         000912 7465 
 A  2141 000913 0D0A          .word   0D0Ah,0000h
         000914 0000 
 A  2142              
 A  2143              ;
 A  2144              ; AD6620 Set-Up Tables:
 A  2145              ; See subroutine rsp_setup for format details.
 A  2146              ; Briefly, AD6620 internal address word is
 A  2147              ; followed by 3 words containing up to 40
 A  2148              ; bits of set-up data. The last byte is not used.
 A  2149              ; Table end is denoted by 0FFFFh in the address
 A  2150              ; field.
 A  2151              ;
 A  2152              ; *** Note *** be sure to comment/uncomment Master/Slave table entries
 A  2153              ; as needed at beginning and end of table
 A  2154              ;
 A  2155              ;
 A  2156              ; AD6620 set-up captured from AD6620.exe "dialog"
 A  2157              ; Filter source file: ad_4_5_10.f20
 A  2158              ; View frequency response using Analog Devices FilterDesign.exe
 A  2159              ;
 A  2160              ; Design specs
 A  2161              ; Frequency out from NCO center)   Attenuation
 A  2162              ; 0 kHz (implied)                      0 dB
 A  2163              ; 150 kHz                              0 dB
 A  2164              ; 166.67 kHz                         -60 dB
 A  2165              ; 1 dB of passband ripple
 A  2166              ; Input sampling rate            66.6666 MHz
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   61

 A  2167              ; Output rate                    333.333 kHz
 A  2168              ; Decimation factor                  200
 A  2169              ;
 A  2170              ; Response from plot
 A  2171              ; -3dB at 154 kHz
 A  2172              ; -6dB at 156 kHz
 A  2173              ; -66 dB in the stopband (166.67 kHz and greater).
 A  2174              ; Passband looks very flat out to 150 kHz, but if you zoom in on the
 A  2175              ; plot, you can see less than 0.5 dB of ripple, about 0.42 dB or so.
 A  2176              ;
 A  2177              ;
 A  2178              ; Converted to assembly ".word" directives in Excel spreadsheet m4510.xls
 A  2179               
 A  2180 000915       ad6620_filter:
 A  2181 000915 0300          .word    0300h, 00000h, 00000h, 00900h  ; Soft reset, Master
         000916 0000 
         000917 0000 
         000918 0900 
 A  2182              ;S      .word    0300h, 00000h, 00000h, 00100h  ; Soft reset, Slave
 A  2183 000919 0301          .word    0301h, 00000h, 00000h, 00000h  ; NCO Control
         00091a 0000 
         00091b 0000 
         00091c 0000 
 A  2184 00091d 0302          .word    0302h, 000FFh, 0FFFFh, 0FF00h  ; NCO Sync Mask
         00091e 00FF 
         00091f FFFF 
         000920 FF00 
 A  2185              ;        .word    0303h, 0000Ah, 08F5Ch, 0DA00h ; NCO Frequency = 2.75 MHz
 A  2186              ; 23 Dec 2009
 A  2187 000921 0303          .word    0303h, 0000Ah, 040B8h, 02C00h  ; NCO Frequency = 2.67 MHz
         000922 000A 
         000923 40B8 
         000924 2C00 
 A  2188 000925 0304          .word    0304h, 00000h, 00000h, 00000h  ; NCO Phase Offset
         000926 0000 
         000927 0000 
         000928 0000 
 A  2189 000929 0305          .word    0305h, 00000h, 00000h, 00500h  ; Input/CIC2 Scale
         00092a 0000 
         00092b 0000 
         00092c 0500 
 A  2190 00092d 0306          .word    0306h, 00000h, 00000h, 00900h  ; MCIC2-1
         00092e 0000 
         00092f 0000 
         000930 0900 
 A  2191 000931 0307          .word    0307h, 00000h, 00000h, 00700h  ; CIC5 Scale
         000932 0000 
         000933 0000 
         000934 0700 
 A  2192 000935 0308          .word    0308h, 00000h, 00000h, 00400h  ; MCIC5-1
         000936 0000 
         000937 0000 
         000938 0400 
 A  2193 000939 0309          .word    0309h, 00000h, 00000h, 00400h  ; Output/RCF Control
         00093a 0000 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   62

         00093b 0000 
         00093c 0400 
 A  2194 00093d 030A          .word    030Ah, 00000h, 00000h, 00300h  ; MRCF-1
         00093e 0000 
         00093f 0000 
         000940 0300 
 A  2195 000941 030B          .word    030Bh, 00000h, 00000h, 00000h  ; RFC Address Offset
         000942 0000 
         000943 0000 
         000944 0000 
 A  2196 000945 030C          .word    030Ch, 00000h, 00000h, 0C700h  ; Ntaps-1
         000946 0000 
         000947 0000 
         000948 C700 
 A  2197 000949 030D          .word    030Dh, 00000h, 00000h, 00000h  ; Reserved (zero)
         00094a 0000 
         00094b 0000 
         00094c 0000 
 A  2198 00094d 0000          .word    0000h, 00000h, 00005h, 0D300h  ; RCF Filter Coefficients
         00094e 0000 
         00094f 0005 
         000950 D300 
 A  2199 000951 0001          .word    0001h, 0FFFFh, 0FFFEh, 03C00h  
         000952 FFFF 
         000953 FFFE 
         000954 3C00 
 A  2200 000955 0002          .word    0002H, 0FFFFH, 0FFFFH, 09900H  
         000956 FFFF 
         000957 FFFF 
         000958 9900 
 A  2201 000959 0003          .word    0003H, 0FFFFH, 0FFF5H, 08F00H  
         00095a FFFF 
         00095b FFF5 
         00095c 8F00 
 A  2202 00095d 0004          .word    0004H, 0FFFFH, 0FFEFH, 0D500H  
         00095e FFFF 
         00095f FFEF 
         000960 D500 
 A  2203 000961 0005          .word    0005H, 0FFFFH, 0FFE6H, 09B00H  
         000962 FFFF 
         000963 FFE6 
         000964 9B00 
 A  2204 000965 0006          .word    0006H, 0FFFFH, 0FFE3H, 0FA00H  
         000966 FFFF 
         000967 FFE3 
         000968 FA00 
 A  2205 000969 0007          .word    0007H, 0FFFFH, 0FFE4H, 0C300H  
         00096a FFFF 
         00096b FFE4 
         00096c C300 
 A  2206 00096d 0008          .word    0008H, 0FFFFH, 0FFEDH, 04C00H  
         00096e FFFF 
         00096f FFED 
         000970 4C00 
 A  2207 000971 0009          .word    0009H, 0FFFFH, 0FFF8H, 08600H  
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   63

         000972 FFFF 
         000973 FFF8 
         000974 8600 
 A  2208 000975 000A          .word    000AH, 00000H, 00005H, 00900H  
         000976 0000 
         000977 0005 
         000978 0900 
 A  2209 000979 000B          .word    000BH, 00000H, 0000CH, 0B000H  
         00097a 0000 
         00097b 000C 
         00097c B000 
 A  2210 00097d 000C          .word    000CH, 00000H, 0000EH, 03B00H  
         00097e 0000 
         00097f 000E 
         000980 3B00 
 A  2211 000981 000D          .word    000DH, 00000H, 00008H, 03B00H  
         000982 0000 
         000983 0008 
         000984 3B00 
 A  2212 000985 000E          .word    000EH, 0FFFFH, 0FFFEH, 0C000H  
         000986 FFFF 
         000987 FFFE 
         000988 C000 
 A  2213 000989 000F          .word    000FH, 0FFFFH, 0FFF5H, 08A00H
         00098a FFFF 
         00098b FFF5 
         00098c 8A00 
 A  2214 00098d 0010          .word    0010H, 0FFFFH, 0FFF1H, 0E200H
         00098e FFFF 
         00098f FFF1 
         000990 E200 
 A  2215 000991 0011          .word    0011H, 0FFFFH, 0FFF5H, 01800H
         000992 FFFF 
         000993 FFF5 
         000994 1800 
 A  2216 000995 0012          .word    0012H, 0FFFFH, 0FFFEH, 04900H
         000996 FFFF 
         000997 FFFE 
         000998 4900 
 A  2217 000999 0013          .word    0013H, 00000H, 00008H, 08100H
         00099a 0000 
         00099b 0008 
         00099c 8100 
 A  2218 00099d 0014          .word    0014H, 00000H, 0000EH, 0F700H
         00099e 0000 
         00099f 000E 
         0009a0 F700 
 A  2219 0009a1 0015          .word    0015H, 00000H, 0000DH, 0B300H
         0009a2 0000 
         0009a3 000D 
         0009a4 B300 
 A  2220 0009a5 0016          .word    0016H, 00000H, 00005H, 05300H
         0009a6 0000 
         0009a7 0005 
         0009a8 5300 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   64

 A  2221 0009a9 0017          .word    0017H, 0FFFFH, 0FFF9H, 07900H
         0009aa FFFF 
         0009ab FFF9 
         0009ac 7900 
 A  2222 0009ad 0018          .word    0018H, 0FFFFH, 0FFF0H, 07500H
         0009ae FFFF 
         0009af FFF0 
         0009b0 7500 
 A  2223 0009b1 0019          .word    0019H, 0FFFFH, 0FFEEH, 0F300H
         0009b2 FFFF 
         0009b3 FFEE 
         0009b4 F300 
 A  2224 0009b5 001A          .word    001AH, 0FFFFH, 0FFF6H, 07D00H
         0009b6 FFFF 
         0009b7 FFF6 
         0009b8 7D00 
 A  2225 0009b9 001B          .word    001BH, 00000H, 00003H, 07F00H
         0009ba 0000 
         0009bb 0003 
         0009bc 7F00 
 A  2226 0009bd 001C          .word    001CH, 00000H, 0000FH, 0A800H
         0009be 0000 
         0009bf 000F 
         0009c0 A800 
 A  2227 0009c1 001D          .word    001DH, 00000H, 00014H, 04F00H
         0009c2 0000 
         0009c3 0014 
         0009c4 4F00 
 A  2228 0009c5 001E          .word    001EH, 00000H, 0000EH, 09500H
         0009c6 0000 
         0009c7 000E 
         0009c8 9500 
 A  2229 0009c9 001F          .word    001FH, 00000H, 00000H, 09C00H
         0009ca 0000 
         0009cb 0000 
         0009cc 9C00 
 A  2230 0009cd 0020          .word    0020H, 0FFFFH, 0FFF1H, 06300H
         0009ce FFFF 
         0009cf FFF1 
         0009d0 6300 
 A  2231 0009d1 0021          .word    0021H, 0FFFFH, 0FFE8H, 0BD00H
         0009d2 FFFF 
         0009d3 FFE8 
         0009d4 BD00 
 A  2232 0009d5 0022          .word    0022H, 0FFFFH, 0FFEBH, 0E200H
         0009d6 FFFF 
         0009d7 FFEB 
         0009d8 E200 
 A  2233 0009d9 0023          .word    0023H, 0FFFFH, 0FFF9H, 0E700H
         0009da FFFF 
         0009db FFF9 
         0009dc E700 
 A  2234 0009dd 0024          .word    0024H, 00000H, 0000CH, 04100H
         0009de 0000 
         0009df 000C 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   65

         0009e0 4100 
 A  2235 0009e1 0025          .word    0025H, 00000H, 00019H, 06500H
         0009e2 0000 
         0009e3 0019 
         0009e4 6500 
 A  2236 0009e5 0026          .word    0026H, 00000H, 0001AH, 00500H
         0009e6 0000 
         0009e7 001A 
         0009e8 0500 
 A  2237 0009e9 0027          .word    0027H, 00000H, 0000CH, 0D100H
         0009ea 0000 
         0009eb 000C 
         0009ec D100 
 A  2238 0009ed 0028          .word    0028H, 0FFFFH, 0FFF7H, 0DA00H
         0009ee FFFF 
         0009ef FFF7 
         0009f0 DA00 
 A  2239 0009f1 0029          .word    0029H, 0FFFFH, 0FFE5H, 0A500H
         0009f2 FFFF 
         0009f3 FFE5 
         0009f4 A500 
 A  2240 0009f5 002A          .word    002AH, 0FFFFH, 0FFE0H, 03100H
         0009f6 FFFF 
         0009f7 FFE0 
         0009f8 3100 
 A  2241 0009f9 002B          .word    002BH, 0FFFFH, 0FFEBH, 03A00H
         0009fa FFFF 
         0009fb FFEB 
         0009fc 3A00 
 A  2242 0009fd 002C          .word    002CH, 00000H, 00002H, 02E00H
         0009fe 0000 
         0009ff 0002 
         000a00 2E00 
 A  2243 000a01 002D          .word    002DH, 00000H, 00019H, 0A200H
         000a02 0000 
         000a03 0019 
         000a04 A200 
 A  2244 000a05 002E          .word    002EH, 00000H, 00025H, 02700H
         000a06 0000 
         000a07 0025 
         000a08 2700 
 A  2245 000a09 002F          .word    002FH, 00000H, 0001DH, 0B100H
         000a0a 0000 
         000a0b 001D 
         000a0c B100 
 A  2246 000a0d 0030          .word    0030H, 00000H, 00005H, 0DF00H
         000a0e 0000 
         000a0f 0005 
         000a10 DF00 
 A  2247 000a11 0031          .word    0031H, 0FFFFH, 0FFE9H, 02400H
         000a12 FFFF 
         000a13 FFE9 
         000a14 2400 
 A  2248 000a15 0032          .word    0032H, 0FFFFH, 0FFD6H, 08400H
         000a16 FFFF 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   66

         000a17 FFD6 
         000a18 8400 
 A  2249 000a19 0033          .word    0033H, 0FFFFH, 0FFD8H, 0A600H
         000a1a FFFF 
         000a1b FFD8 
         000a1c A600 
 A  2250 000a1d 0034          .word    0034H, 0FFFFH, 0FFEFH, 0F900H
         000a1e FFFF 
         000a1f FFEF 
         000a20 F900 
 A  2251 000a21 0035          .word    0035H, 00000H, 00011H, 09100H
         000a22 0000 
         000a23 0011 
         000a24 9100 
 A  2252 000a25 0036          .word    0036H, 00000H, 0002CH, 04A00H
         000a26 0000 
         000a27 002C 
         000a28 4A00 
 A  2253 000a29 0037          .word    0037H, 00000H, 00031H, 05000H
         000a2a 0000 
         000a2b 0031 
         000a2c 5000 
 A  2254 000a2d 0038          .word    0038H, 00000H, 0001CH, 06100H
         000a2e 0000 
         000a2f 001C 
         000a30 6100 
 A  2255 000a31 0039          .word    0039H, 0FFFFH, 0FFF6H, 0AA00H
         000a32 FFFF 
         000a33 FFF6 
         000a34 AA00 
 A  2256 000a35 003A          .word    003AH, 0FFFFH, 0FFD3H, 01A00H
         000a36 FFFF 
         000a37 FFD3 
         000a38 1A00 
 A  2257 000a39 003B          .word    003BH, 0FFFFH, 0FFC4H, 0DB00H
         000a3a FFFF 
         000a3b FFC4 
         000a3c DB00 
 A  2258 000a3d 003C          .word    003CH, 0FFFFH, 0FFD5H, 02F00H
         000a3e FFFF 
         000a3f FFD5 
         000a40 2F00 
 A  2259 000a41 003D          .word    003DH, 0FFFFH, 0FFFDH, 0B900H
         000a42 FFFF 
         000a43 FFFD 
         000a44 B900 
 A  2260 000a45 003E          .word    003EH, 00000H, 0002AH, 0A700H
         000a46 0000 
         000a47 002A 
         000a48 A700 
 A  2261 000a49 003F          .word    003FH, 00000H, 00044H, 04200H
         000a4a 0000 
         000a4b 0044 
         000a4c 4200 
 A  2262 000a4d 0040          .word    0040H, 00000H, 0003BH, 04A00H
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   67

         000a4e 0000 
         000a4f 003B 
         000a50 4A00 
 A  2263 000a51 0041          .word    0041H, 00000H, 00011H, 0BE00H
         000a52 0000 
         000a53 0011 
         000a54 BE00 
 A  2264 000a55 0042          .word    0042H, 0FFFFH, 0FFDBH, 04800H
         000a56 FFFF 
         000a57 FFDB 
         000a58 4800 
 A  2265 000a59 0043          .word    0043H, 0FFFFH, 0FFB4H, 00300H
         000a5a FFFF 
         000a5b FFB4 
         000a5c 0300 
 A  2266 000a5d 0044          .word    0044H, 0FFFFH, 0FFB2H, 05800H
         000a5e FFFF 
         000a5f FFB2 
         000a60 5800 
 A  2267 000a61 0045          .word    0045H, 0FFFFH, 0FFDAH, 05200H
         000a62 FFFF 
         000a63 FFDA 
         000a64 5200 
 A  2268 000a65 0046          .word    0046H, 00000H, 0001AH, 01E00H
         000a66 0000 
         000a67 001A 
         000a68 1E00 
 A  2269 000a69 0047          .word    0047H, 00000H, 00051H, 08200H
         000a6a 0000 
         000a6b 0051 
         000a6c 8200 
 A  2270 000a6d 0048          .word    0048H, 00000H, 00061H, 0F300H
         000a6e 0000 
         000a6f 0061 
         000a70 F300 
 A  2271 000a71 0049          .word    0049H, 00000H, 0003EH, 0FB00H
         000a72 0000 
         000a73 003E 
         000a74 FB00 
 A  2272 000a75 004A          .word    004AH, 0FFFFH, 0FFF6H, 09A00H
         000a76 FFFF 
         000a77 FFF6 
         000a78 9A00 
 A  2273 000a79 004B          .word    004BH, 0FFFFH, 0FFACH, 03B00H
         000a7a FFFF 
         000a7b FFAC 
         000a7c 3B00 
 A  2274 000a7d 004C          .word    004CH, 0FFFFH, 0FF87H, 0CD00H
         000a7e FFFF 
         000a7f FF87 
         000a80 CD00 
 A  2275 000a81 004D          .word    004DH, 0FFFFH, 0FFA0H, 0E000H
         000a82 FFFF 
         000a83 FFA0 
         000a84 E000 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   68

 A  2276 000a85 004E          .word    004EH, 0FFFFH, 0FFF0H, 06C00H
         000a86 FFFF 
         000a87 FFF0 
         000a88 6C00 
 A  2277 000a89 004F          .word    004FH, 00000H, 00051H, 05000H
         000a8a 0000 
         000a8b 0051 
         000a8c 5000 
 A  2278 000a8d 0050          .word    0050H, 00000H, 00091H, 00000H
         000a8e 0000 
         000a8f 0091 
         000a90 0000 
 A  2279 000a91 0051          .word    0051H, 00000H, 00089H, 00300H
         000a92 0000 
         000a93 0089 
         000a94 0300 
 A  2280 000a95 0052          .word    0052H, 00000H, 00034H, 0D300H
         000a96 0000 
         000a97 0034 
         000a98 D300 
 A  2281 000a99 0053          .word    0053H, 0FFFFH, 0FFB8H, 07000H
         000a9a FFFF 
         000a9b FFB8 
         000a9c 7000 
 A  2282 000a9d 0054          .word    0054H, 0FFFFH, 0FF52H, 03500H
         000a9e FFFF 
         000a9f FF52 
         000aa0 3500 
 A  2283 000aa1 0055          .word    0055H, 0FFFFH, 0FF3DH, 02500H
         000aa2 FFFF 
         000aa3 FF3D 
         000aa4 2500 
 A  2284 000aa5 0056          .word    0056H, 0FFFFH, 0FF91H, 02300H
         000aa6 FFFF 
         000aa7 FF91 
         000aa8 2300 
 A  2285 000aa9 0057          .word    0057H, 00000H, 00031H, 02B00H
         000aaa 0000 
         000aab 0031 
         000aac 2B00 
 A  2286 000aad 0058          .word    0058H, 00000H, 000D2H, 08F00H
         000aae 0000 
         000aaf 00D2 
         000ab0 8F00 
 A  2287 000ab1 0059          .word    0059H, 00000H, 0011CH, 0AC00H
         000ab2 0000 
         000ab3 011C 
         000ab4 AC00 
 A  2288 000ab5 005A          .word    005AH, 00000H, 000D4H, 0AD00H
         000ab6 0000 
         000ab7 00D4 
         000ab8 AD00 
 A  2289 000ab9 005B          .word    005BH, 00000H, 00001H, 05100H
         000aba 0000 
         000abb 0001 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   69

         000abc 5100 
 A  2290 000abd 005C          .word    005CH, 0FFFFH, 0FEF4H, 09300H
         000abe FFFF 
         000abf FEF4 
         000ac0 9300 
 A  2291 000ac1 005D          .word    005DH, 0FFFFH, 0FE33H, 01500H
         000ac2 FFFF 
         000ac3 FE33 
         000ac4 1500 
 A  2292 000ac5 005E          .word    005EH, 0FFFFH, 0FE40H, 0D400H
         000ac6 FFFF 
         000ac7 FE40 
         000ac8 D400 
 A  2293 000ac9 005F          .word    005FH, 0FFFFH, 0FF66H, 0CA00H
         000aca FFFF 
         000acb FF66 
         000acc CA00 
 A  2294 000acd 0060          .word    0060H, 00000H, 0018BH, 03F00H
         000ace 0000 
         000acf 018B 
         000ad0 3F00 
 A  2295 000ad1 0061          .word    0061H, 00000H, 0042FH, 00200H
         000ad2 0000 
         000ad3 042F 
         000ad4 0200 
 A  2296 000ad5 0062          .word    0062H, 00000H, 00694H, 01D00H
         000ad6 0000 
         000ad7 0694 
         000ad8 1D00 
 A  2297 000ad9 0063          .word    0063H, 00000H, 007FFH, 0FF00H
         000ada 0000 
         000adb 07FF 
         000adc FF00 
 A  2298 000add 0064          .word    0064H, 00000H, 007FFH, 0FF00H
         000ade 0000 
         000adf 07FF 
         000ae0 FF00 
 A  2299 000ae1 0065          .word    0065H, 00000H, 00694H, 01D00H
         000ae2 0000 
         000ae3 0694 
         000ae4 1D00 
 A  2300 000ae5 0066          .word    0066H, 00000H, 0042FH, 00200H
         000ae6 0000 
         000ae7 042F 
         000ae8 0200 
 A  2301 000ae9 0067          .word    0067H, 00000H, 0018BH, 03F00H
         000aea 0000 
         000aeb 018B 
         000aec 3F00 
 A  2302 000aed 0068          .word    0068H, 0FFFFH, 0FF66H, 0CA00H
         000aee FFFF 
         000aef FF66 
         000af0 CA00 
 A  2303 000af1 0069          .word    0069H, 0FFFFH, 0FE40H, 0D400H
         000af2 FFFF 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   70

         000af3 FE40 
         000af4 D400 
 A  2304 000af5 006A          .word    006AH, 0FFFFH, 0FE33H, 01500H
         000af6 FFFF 
         000af7 FE33 
         000af8 1500 
 A  2305 000af9 006B          .word    006BH, 0FFFFH, 0FEF4H, 09300H
         000afa FFFF 
         000afb FEF4 
         000afc 9300 
 A  2306 000afd 006C          .word    006CH, 00000H, 00001H, 05100H
         000afe 0000 
         000aff 0001 
         000b00 5100 
 A  2307 000b01 006D          .word    006DH, 00000H, 000D4H, 0AD00H
         000b02 0000 
         000b03 00D4 
         000b04 AD00 
 A  2308 000b05 006E          .word    006EH, 00000H, 0011CH, 0AC00H
         000b06 0000 
         000b07 011C 
         000b08 AC00 
 A  2309 000b09 006F          .word    006FH, 00000H, 000D2H, 08F00H
         000b0a 0000 
         000b0b 00D2 
         000b0c 8F00 
 A  2310 000b0d 0070          .word    0070H, 00000H, 00031H, 02B00H
         000b0e 0000 
         000b0f 0031 
         000b10 2B00 
 A  2311 000b11 0071          .word    0071H, 0FFFFH, 0FF91H, 02300H
         000b12 FFFF 
         000b13 FF91 
         000b14 2300 
 A  2312 000b15 0072          .word    0072H, 0FFFFH, 0FF3DH, 02500H
         000b16 FFFF 
         000b17 FF3D 
         000b18 2500 
 A  2313 000b19 0073          .word    0073H, 0FFFFH, 0FF52H, 03500H
         000b1a FFFF 
         000b1b FF52 
         000b1c 3500 
 A  2314 000b1d 0074          .word    0074H, 0FFFFH, 0FFB8H, 07000H
         000b1e FFFF 
         000b1f FFB8 
         000b20 7000 
 A  2315 000b21 0075          .word    0075H, 00000H, 00034H, 0D300H
         000b22 0000 
         000b23 0034 
         000b24 D300 
 A  2316 000b25 0076          .word    0076H, 00000H, 00089H, 00300H
         000b26 0000 
         000b27 0089 
         000b28 0300 
 A  2317 000b29 0077          .word    0077H, 00000H, 00091H, 00000H
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   71

         000b2a 0000 
         000b2b 0091 
         000b2c 0000 
 A  2318 000b2d 0078          .word    0078H, 00000H, 00051H, 05000H
         000b2e 0000 
         000b2f 0051 
         000b30 5000 
 A  2319 000b31 0079          .word    0079H, 0FFFFH, 0FFF0H, 06C00H
         000b32 FFFF 
         000b33 FFF0 
         000b34 6C00 
 A  2320 000b35 007A          .word    007AH, 0FFFFH, 0FFA0H, 0E000H
         000b36 FFFF 
         000b37 FFA0 
         000b38 E000 
 A  2321 000b39 007B          .word    007BH, 0FFFFH, 0FF87H, 0CD00H
         000b3a FFFF 
         000b3b FF87 
         000b3c CD00 
 A  2322 000b3d 007C          .word    007CH, 0FFFFH, 0FFACH, 03B00H
         000b3e FFFF 
         000b3f FFAC 
         000b40 3B00 
 A  2323 000b41 007D          .word    007DH, 0FFFFH, 0FFF6H, 09A00H
         000b42 FFFF 
         000b43 FFF6 
         000b44 9A00 
 A  2324 000b45 007E          .word    007EH, 00000H, 0003EH, 0FB00H
         000b46 0000 
         000b47 003E 
         000b48 FB00 
 A  2325 000b49 007F          .word    007FH, 00000H, 00061H, 0F300H
         000b4a 0000 
         000b4b 0061 
         000b4c F300 
 A  2326 000b4d 0080          .word    0080H, 00000H, 00051H, 08200H
         000b4e 0000 
         000b4f 0051 
         000b50 8200 
 A  2327 000b51 0081          .word    0081H, 00000H, 0001AH, 01E00H
         000b52 0000 
         000b53 001A 
         000b54 1E00 
 A  2328 000b55 0082          .word    0082H, 0FFFFH, 0FFDAH, 05200H
         000b56 FFFF 
         000b57 FFDA 
         000b58 5200 
 A  2329 000b59 0083          .word    0083H, 0FFFFH, 0FFB2H, 05800H
         000b5a FFFF 
         000b5b FFB2 
         000b5c 5800 
 A  2330 000b5d 0084          .word    0084H, 0FFFFH, 0FFB4H, 00300H
         000b5e FFFF 
         000b5f FFB4 
         000b60 0300 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   72

 A  2331 000b61 0085          .word    0085H, 0FFFFH, 0FFDBH, 04800H
         000b62 FFFF 
         000b63 FFDB 
         000b64 4800 
 A  2332 000b65 0086          .word    0086H, 00000H, 00011H, 0BE00H
         000b66 0000 
         000b67 0011 
         000b68 BE00 
 A  2333 000b69 0087          .word    0087H, 00000H, 0003BH, 04A00H
         000b6a 0000 
         000b6b 003B 
         000b6c 4A00 
 A  2334 000b6d 0088          .word    0088H, 00000H, 00044H, 04200H
         000b6e 0000 
         000b6f 0044 
         000b70 4200 
 A  2335 000b71 0089          .word    0089H, 00000H, 0002AH, 0A700H
         000b72 0000 
         000b73 002A 
         000b74 A700 
 A  2336 000b75 008A          .word    008AH, 0FFFFH, 0FFFDH, 0B900H
         000b76 FFFF 
         000b77 FFFD 
         000b78 B900 
 A  2337 000b79 008B          .word    008BH, 0FFFFH, 0FFD5H, 02F00H
         000b7a FFFF 
         000b7b FFD5 
         000b7c 2F00 
 A  2338 000b7d 008C          .word    008CH, 0FFFFH, 0FFC4H, 0DB00H
         000b7e FFFF 
         000b7f FFC4 
         000b80 DB00 
 A  2339 000b81 008D          .word    008DH, 0FFFFH, 0FFD3H, 01A00H
         000b82 FFFF 
         000b83 FFD3 
         000b84 1A00 
 A  2340 000b85 008E          .word    008EH, 0FFFFH, 0FFF6H, 0AA00H
         000b86 FFFF 
         000b87 FFF6 
         000b88 AA00 
 A  2341 000b89 008F          .word    008FH, 00000H, 0001CH, 06100H
         000b8a 0000 
         000b8b 001C 
         000b8c 6100 
 A  2342 000b8d 0090          .word    0090H, 00000H, 00031H, 05000H
         000b8e 0000 
         000b8f 0031 
         000b90 5000 
 A  2343 000b91 0091          .word    0091H, 00000H, 0002CH, 04A00H
         000b92 0000 
         000b93 002C 
         000b94 4A00 
 A  2344 000b95 0092          .word    0092H, 00000H, 00011H, 09100H
         000b96 0000 
         000b97 0011 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   73

         000b98 9100 
 A  2345 000b99 0093          .word    0093H, 0FFFFH, 0FFEFH, 0F900H
         000b9a FFFF 
         000b9b FFEF 
         000b9c F900 
 A  2346 000b9d 0094          .word    0094H, 0FFFFH, 0FFD8H, 0A600H
         000b9e FFFF 
         000b9f FFD8 
         000ba0 A600 
 A  2347 000ba1 0095          .word    0095H, 0FFFFH, 0FFD6H, 08400H
         000ba2 FFFF 
         000ba3 FFD6 
         000ba4 8400 
 A  2348 000ba5 0096          .word    0096H, 0FFFFH, 0FFE9H, 02400H
         000ba6 FFFF 
         000ba7 FFE9 
         000ba8 2400 
 A  2349 000ba9 0097          .word    0097H, 00000H, 00005H, 0DF00H
         000baa 0000 
         000bab 0005 
         000bac DF00 
 A  2350 000bad 0098          .word    0098H, 00000H, 0001DH, 0B100H
         000bae 0000 
         000baf 001D 
         000bb0 B100 
 A  2351 000bb1 0099          .word    0099H, 00000H, 00025H, 02700H
         000bb2 0000 
         000bb3 0025 
         000bb4 2700 
 A  2352 000bb5 009A          .word    009AH, 00000H, 00019H, 0A200H
         000bb6 0000 
         000bb7 0019 
         000bb8 A200 
 A  2353 000bb9 009B          .word    009BH, 00000H, 00002H, 02E00H
         000bba 0000 
         000bbb 0002 
         000bbc 2E00 
 A  2354 000bbd 009C          .word    009CH, 0FFFFH, 0FFEBH, 03A00H
         000bbe FFFF 
         000bbf FFEB 
         000bc0 3A00 
 A  2355 000bc1 009D          .word    009DH, 0FFFFH, 0FFE0H, 03100H
         000bc2 FFFF 
         000bc3 FFE0 
         000bc4 3100 
 A  2356 000bc5 009E          .word    009EH, 0FFFFH, 0FFE5H, 0A500H
         000bc6 FFFF 
         000bc7 FFE5 
         000bc8 A500 
 A  2357 000bc9 009F          .word    009FH, 0FFFFH, 0FFF7H, 0DA00H
         000bca FFFF 
         000bcb FFF7 
         000bcc DA00 
 A  2358 000bcd 00A0          .word    00A0H, 00000H, 0000CH, 0D100H
         000bce 0000 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   74

         000bcf 000C 
         000bd0 D100 
 A  2359 000bd1 00A1          .word    00A1H, 00000H, 0001AH, 00500H
         000bd2 0000 
         000bd3 001A 
         000bd4 0500 
 A  2360 000bd5 00A2          .word    00A2H, 00000H, 00019H, 06500H
         000bd6 0000 
         000bd7 0019 
         000bd8 6500 
 A  2361 000bd9 00A3          .word    00A3H, 00000H, 0000CH, 04100H
         000bda 0000 
         000bdb 000C 
         000bdc 4100 
 A  2362 000bdd 00A4          .word    00A4H, 0FFFFH, 0FFF9H, 0E700H
         000bde FFFF 
         000bdf FFF9 
         000be0 E700 
 A  2363 000be1 00A5          .word    00A5H, 0FFFFH, 0FFEBH, 0E200H
         000be2 FFFF 
         000be3 FFEB 
         000be4 E200 
 A  2364 000be5 00A6          .word    00A6H, 0FFFFH, 0FFE8H, 0BD00H
         000be6 FFFF 
         000be7 FFE8 
         000be8 BD00 
 A  2365 000be9 00A7          .word    00A7H, 0FFFFH, 0FFF1H, 06300H
         000bea FFFF 
         000beb FFF1 
         000bec 6300 
 A  2366 000bed 00A8          .word    00A8H, 00000H, 00000H, 09C00H
         000bee 0000 
         000bef 0000 
         000bf0 9C00 
 A  2367 000bf1 00A9          .word    00A9H, 00000H, 0000EH, 09500H
         000bf2 0000 
         000bf3 000E 
         000bf4 9500 
 A  2368 000bf5 00AA          .word    00AAH, 00000H, 00014H, 04F00H
         000bf6 0000 
         000bf7 0014 
         000bf8 4F00 
 A  2369 000bf9 00AB          .word    00ABH, 00000H, 0000FH, 0A800H
         000bfa 0000 
         000bfb 000F 
         000bfc A800 
 A  2370 000bfd 00AC          .word    00ACH, 00000H, 00003H, 07F00H
         000bfe 0000 
         000bff 0003 
         000c00 7F00 
 A  2371 000c01 00AD          .word    00ADH, 0FFFFH, 0FFF6H, 07D00H
         000c02 FFFF 
         000c03 FFF6 
         000c04 7D00 
 A  2372 000c05 00AE          .word    00AEH, 0FFFFH, 0FFEEH, 0F300H
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   75

         000c06 FFFF 
         000c07 FFEE 
         000c08 F300 
 A  2373 000c09 00AF          .word    00AFH, 0FFFFH, 0FFF0H, 07500H
         000c0a FFFF 
         000c0b FFF0 
         000c0c 7500 
 A  2374 000c0d 00B0          .word    00B0H, 0FFFFH, 0FFF9H, 07900H
         000c0e FFFF 
         000c0f FFF9 
         000c10 7900 
 A  2375 000c11 00B1          .word    00B1H, 00000H, 00005H, 05300H
         000c12 0000 
         000c13 0005 
         000c14 5300 
 A  2376 000c15 00B2          .word    00B2H, 00000H, 0000DH, 0B300H
         000c16 0000 
         000c17 000D 
         000c18 B300 
 A  2377 000c19 00B3          .word    00B3H, 00000H, 0000EH, 0F700H
         000c1a 0000 
         000c1b 000E 
         000c1c F700 
 A  2378 000c1d 00B4          .word    00B4H, 00000H, 00008H, 08100H
         000c1e 0000 
         000c1f 0008 
         000c20 8100 
 A  2379 000c21 00B5          .word    00B5H, 0FFFFH, 0FFFEH, 04900H
         000c22 FFFF 
         000c23 FFFE 
         000c24 4900 
 A  2380 000c25 00B6          .word    00B6H, 0FFFFH, 0FFF5H, 01800H
         000c26 FFFF 
         000c27 FFF5 
         000c28 1800 
 A  2381 000c29 00B7          .word    00B7H, 0FFFFH, 0FFF1H, 0E200H
         000c2a FFFF 
         000c2b FFF1 
         000c2c E200 
 A  2382 000c2d 00B8          .word    00B8H, 0FFFFH, 0FFF5H, 08A00H
         000c2e FFFF 
         000c2f FFF5 
         000c30 8A00 
 A  2383 000c31 00B9          .word    00B9H, 0FFFFH, 0FFFEH, 0C000H
         000c32 FFFF 
         000c33 FFFE 
         000c34 C000 
 A  2384 000c35 00BA          .word    00BAH, 00000H, 00008H, 03B00H
         000c36 0000 
         000c37 0008 
         000c38 3B00 
 A  2385 000c39 00BB          .word    00BBH, 00000H, 0000EH, 03B00H
         000c3a 0000 
         000c3b 000E 
         000c3c 3B00 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   76

 A  2386 000c3d 00BC          .word    00BCH, 00000H, 0000CH, 0B000H
         000c3e 0000 
         000c3f 000C 
         000c40 B000 
 A  2387 000c41 00BD          .word    00BDH, 00000H, 00005H, 00900H
         000c42 0000 
         000c43 0005 
         000c44 0900 
 A  2388 000c45 00BE          .word    00BEH, 0FFFFH, 0FFF8H, 08600H
         000c46 FFFF 
         000c47 FFF8 
         000c48 8600 
 A  2389 000c49 00BF          .word    00BFH, 0FFFFH, 0FFEDH, 04C00H  
         000c4a FFFF 
         000c4b FFED 
         000c4c 4C00 
 A  2390 000c4d 00C0          .word    00C0H, 0FFFFH, 0FFE4H, 0C300H  
         000c4e FFFF 
         000c4f FFE4 
         000c50 C300 
 A  2391 000c51 00C1          .word    00C1H, 0FFFFH, 0FFE3H, 0FA00H  
         000c52 FFFF 
         000c53 FFE3 
         000c54 FA00 
 A  2392 000c55 00C2          .word    00C2H, 0FFFFH, 0FFE6H, 09B00H  
         000c56 FFFF 
         000c57 FFE6 
         000c58 9B00 
 A  2393 000c59 00C3          .word    00C3H, 0FFFFH, 0FFEFH, 0D500H  
         000c5a FFFF 
         000c5b FFEF 
         000c5c D500 
 A  2394 000c5d 00C4          .word    00C4H, 0FFFFH, 0FFF5H, 08F00H  
         000c5e FFFF 
         000c5f FFF5 
         000c60 8F00 
 A  2395 000c61 00C5          .word    00C5H, 0FFFFH, 0FFFFH, 09900H  
         000c62 FFFF 
         000c63 FFFF 
         000c64 9900 
 A  2396 000c65 00C6          .word    00C6H, 0FFFFH, 0FFFEH, 03C00H  
         000c66 FFFF 
         000c67 FFFE 
         000c68 3C00 
 A  2397 000c69 00C7          .word    00C7H, 00000H, 00005H, 0D300H  ; End RCF Filter Coefficients
         000c6a 0000 
         000c6b 0005 
         000c6c D300 
 A  2398 000c6d 0300          .word    0300H, 00000H, 00000H, 00900H  ; Soft Reset, Master
         000c6e 0000 
         000c6f 0000 
         000c70 0900 
 A  2399              ;S      .word    0300H, 00000H, 00000H, 00100H  ; Soft Reset, Slave
 A  2400 000c71 0300          .word    0300H, 00000H, 00000H, 00800H  ; Run: end of soft reset, Master
         000c72 0000 
TMS320C54x COFF Assembler PC v4.1.0 Tue Jan 05 10:48:54 2010

Tools Copyright (c) 1996-2005 Texas Instruments Incorporated
dartm11.abs                                                          PAGE   77

         000c73 0000 
         000c74 0800 
 A  2401              ;S        .word    0300h, 00000h, 00000h, 00000h  ; Run: end of soft reset, Slave
 A  2402 000c75 FFFF          .word    0FFFFH ; End of Table
 A  2403 000c76       ad6620_filter_end:
 A  2404              
 A  2405              ;
 A  2406              ; NCO control "short tables"- use with ad6620_setup
 A  2407              ;
 A  2408 000c76       NCO_1000_kHz:
 A  2409 000c76 0303          .word    0303h, 0003h, 0D70Ah, 7E00h; NCO Frequency = 1 MHz
         000c77 0003 
         000c78 D70A 
         000c79 7E00 
 A  2410 000c7a FFFF          .word    0FFFFh
 A  2411 000c7b       NCO_2750_kHz:
 A  2412 000c7b 0303          .word    0303h, 0000Ah, 08F5Ch, 0DA00h  ; NCO Frequency = 2.75 MHz
         000c7c 000A 
         000c7d 8F5C 
         000c7e DA00 
 A  2413 000c7f FFFF          .word    0FFFFh
 A  2414 000c80       NCO_250_kHz:
 A  2415 000c80 0303          .word    0303h, 00000h, 0F5C2h, 09F00h  ; NCO Frequency = 250 kHz
         000c81 0000 
         000c82 F5C2 
         000c83 9F00 
 A  2416 000c84 FFFF          .word    0FFFFh
 A  2417 000c85       NCO_2670_kHz:
 A  2418 000c85 0303          .word    0303h, 0000Ah, 040B8h, 02C00h  ; NCO Frequency = 2.67 MHz
         000c86 000A 
         000c87 40B8 
         000c88 2C00 
 A  2419 000c89 FFFF          .word    0FFFFh       
 A  2420                      .end

No Assembly Errors, No Assembly Warnings
